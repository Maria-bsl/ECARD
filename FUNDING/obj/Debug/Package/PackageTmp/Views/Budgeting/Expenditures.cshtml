@{
    ViewBag.Title = "Users";
    Layout = "~/Views/Shared/_Customers.cshtml";

    ViewData["Title"] = "Expenditures";
    ViewData["Home"] = "Home";
    //ViewData["History"] = "Budget History";
    ViewData["Bct"] = "Create";
    ViewData["Chart"] = "View Chart";

    //Table header labels
    ViewData["Sno"] = "Sno";

    ViewData["Actions"] = "Actions";

}


<div class="row page-titles">
    <div class="col-md-5 align-self-center">
        <h4 class="text-themecolor">@ViewData["Title"]</h4>
    </div>
    <div class="col-md-7 align-self-center text-end">
        <div class="d-flex justify-content-end align-items-center">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="@Url.Action("Dashboard", "CustomerActivity")">@ViewData["Home"]</a>
                </li>
                <li class="breadcrumb-item active">@ViewData["Title"]</li>
            </ol>
        </div>
    </div>
</div>
<div class="card border-0">
    <div class="card-body">
        <div style="display: flex;" class="mb-1 justify-content-between">
            <button type="button" class="btn btn-outline-info btn-rounded ms-1" data-bs-toggle="modal" data-bs-target="#expenditureChartsModal">
                <i class="fas fa-chart-bar"></i>
                @ViewData["Chart"]
            </button>

            <button type="button" class="btn btn-outline-primary btn-rounded" data-bs-toggle="modal" data-bs-target="#ajaxHelperCreateModal">
                <i class="fas fa-plus"></i>
                @ViewData["Bct"]
            </button>
        </div>
        <hr />

        @Html.Partial("_CreateExpenditureRecord")
        @Html.Partial("_UpdateExpenditureRecord")
        @Html.Partial("_ExpenditureCharts")


        <div class="table-responsive with-loader">
            <table id="expenditure-datatable" class="table table-bordered display" style="width: 100%;">
                <thead>
                    <tr>
                        <th class="th-sno ps-2 text-center">@ViewData["Sno"]</th>
                        <th>Item</th>
                        <th style="width:60px;">Quantity</th>
                        <th style="width:70px;">Unit Price (TZS)</th>
                        <th style="width:80px;">Total Price (TZS)</th>
                        @*<th style="width:80px;">Variation from Budget (TZS)</th>*@
                        <th>Remarks</th>
                        @*<th style="width:40px;">Status</th>*@
                        <th class="th-actions px-2">
                            <div class="th-actions-div text-center">
                                @ViewData["Actions"]
                            </div>
                        </th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        @*<th></th>
                        <th></th>*@
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
</div>

@section styles{
    <link href="~/Scripts/intl-tel-input/css/isValidNumber.css" rel="stylesheet" />
    <link href="~/Scripts/intl-tel-input/css/intlTelInput.min.css" rel="stylesheet" />
    <link href="~/Content/Site.css" rel="stylesheet" />

    <style>
        #expenditure-datatable > tfoot th {
            border-bottom: solid 2px #dee2e6;
        }

        .balancePercentage {
            height: 28px;
        }

            .balancePercentage > span:first-of-type {
                top: 3px;
                right: 3px;
                z-index: 10;
            }

            .balancePercentage > span:last-of-type {
                top: 0;
                left: 0;
                background-color: #00ffc0;
            }

            .balancePercentage > span.fill-negative {
                background-color: #e46a76;
            }

        .service-provider-title {
            display: flex;
            height: 36px;
            border-bottom: solid rgba(0, 0, 0, 0.025) 1px;
            margin: 0.25rem 0;
        }

        .form-group{
            margin-bottom: .5rem;
        }

        .col-form-label {
            padding-bottom: calc(0.275rem + 1px);
        }

        .fw-b-500 {
            font-weight: 500 !important;
        }
    </style>
}


@section scripts{
    <script src="~/Script/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/Script/jquery.validate.min.js"></script>
    <script src="~/Script/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Script/cleave.min.js"></script>
    <script src="~/Scripts/SweetAlert2/sweetalert2.all.min.js"></script>
    <script src="~/Scripts/numeral.min.js"></script>
    <script src="~/Scripts/chart.min.js"></script>
    <script src="~/Scripts/intl-tel-input/js/intlTelInput-jquery.min.js"></script>
    <script src="~/Scripts/intl-tel-input/js/intlTelInput.js"></script>



    <script>

        var budgetingTable;

        var intl_tel_input = (function () {

            function Intl_Tel_Input() {
                this.createFormElement = $('#ajaxHelperCreateForm');
                this.updateFormElement = $('#ajaxHelperUpdateForm');
            }

            Intl_Tel_Input.prototype.InitilizeUpdateForm = function () {

                var $form = this.updateFormElement.get(0);

                var $mobileNumber = $form.querySelector("#SPU_Mobile_Number");

                initilize_intlTelInput($mobileNumber);

                ValidateInternationMobileNumber($form, $mobileNumber);

            }

            Intl_Tel_Input.prototype.InitilizeOnCreateForm = function () {

                var $form = this.createFormElement;
                var $mobileNumber = document.querySelector("#SPC_Mobile_Number");

                initilize_intlTelInput($mobileNumber);

                ValidateInternationMobileNumber($form.get(0), $mobileNumber);

                var $modal = this.createFormElement.find('.modal');
                var iti = window.intlTelInputGlobals.getInstance($mobileNumber);

                $modal.on('show.bs.modal', function () {
                    iti.setCountry("tz");
                    $form.find("#intl-input-error").addClass('d-none');
                });
            }

            // here, the index maps to the error code returned from getValidationError - see readme
            function getErrorMapArray() {
                var errorMap = [
                    "Please enter a valid mobile operator code",
                    "Invalid country code",
                    "The mobile number is too short",
                    "The mobile number is too long",
                    "Please enter a valid mobile number"];

                return errorMap;
            }

            function initilize_intlTelInput($mobileNumber) {

                 window.intlTelInput($mobileNumber, {
                    // allowDropdown: false,
                    // autoHideDialCode: false,
                    // autoPlaceholder: "off",
                    dropdownContainer: document.body,
                    // excludeCountries: ["us"],
                    formatOnDisplay: false,
                    // geoIpLookup: function(callback) {
                    //   $.get("http://ipinfo.io", function() {}, "jsonp").always(function(resp) {
                    //     var countryCode = (resp && resp.country) ? resp.country : "";
                    //     callback(countryCode);
                    //   });
                    // },
                    //hiddenInput: "full_number",
                    //initialCountry: "auto",
                    // localizedCountries: { 'de': 'Deutschland' },
                    //nationalMode: false,
                    // onlyCountries: ['us', 'gb', 'ch', 'ca', 'do'],
                    //placeholderNumberType: "MOBILE",
                    preferredCountries: ['tz'],
                    separateDialCode: true,
                    utilsScript: "@Url.Content("~/Scripts/intl-tel-input/js/utils.js")",
                 });
            }

            function ValidateInternationMobileNumber($form, $input) {
                var iti = window.intlTelInputGlobals.getInstance($input);

                $input.addEventListener('keyup', reset($form));
                $input.addEventListener('change', reset($form));

                $input.addEventListener('blur', function () {
                    reset($form);

                    $input.classList.remove("invalid-mobile-number");

                    var mobileNumberValue = $input.value.trim();
                    var isOnlyDigits = new RegExp(/^\d+$/);

                    var $intl_tel_errorMsg = $form.querySelector("#intl-input-error");

                    if (mobileNumberValue) {
                        if (isOnlyDigits.test(mobileNumberValue)) {
                            if (!iti.isValidNumber()) {
                                var errorCode = iti.getValidationError();
                                var errorMap = getErrorMapArray();

                                if (errorCode >= 0 && errorCode < errorMap.length) {
                                    $intl_tel_errorMsg.innerHTML = errorMap[errorCode];
                                    $intl_tel_errorMsg.classList.remove("d-none");
                                    $intl_tel_errorMsg.classList.add("d-block");
                                    $input.classList.add("invalid-mobile-number");
                                }

                            } else {
                                $input.classList.remove("invalid-mobile-number");
                                var $intl_tel_mobileNumber = $form.querySelector("#Int_Mobile_number");
                                $intl_tel_mobileNumber.value = iti.getNumber();
                            }

                        } else {
                            $input.classList.add("invalid-mobile-number");
                            $intl_tel_errorMsg.classList.remove("d-none");
                            $intl_tel_errorMsg.classList.add("d-block");
                            $intl_tel_errorMsg.innerHTML = "Please enter a valid mobile number";
                        }
                    }
                });

            }

            function reset($form){
                var $intl_tel_errorMsg = $form.querySelector("#intl-input-error");

                $intl_tel_errorMsg.innerHTML = "";
                $intl_tel_errorMsg.classList.remove("d-block");
                $intl_tel_errorMsg.classList.add("d-none");
            };


            return new Intl_Tel_Input();
        })();

        var budgetChartModal = (function () {
            function BudgetChartModal() {
                this.chartInstance = null;
            }

            BudgetChartModal.prototype.Init = function () {
                var $budgetModal = $('#expenditureChartsModal');

                OnModalOpening($budgetModal);
                OnModalClosing($budgetModal);
            }

            function OnModalOpening($modal) {
                $modal.on('show.bs.modal', function () {
                    budgetChartModal.chartInstance = budgetChart.initiliazeBudgetPieChart('expenditure-charts');
                });
            }

            function OnModalClosing($modal) {
                $modal.on('hide.bs.modal', function () {
                    budgetChartModal.chartInstance.destroy();
                });
            }

            return new BudgetChartModal();
        })();

        var budgetChart = (function () {
            function BudgetChart() {}

                BudgetChart.prototype.initiliazeBudgetPieChart = function (canvasIdProperty) {

                    return budgetPieChart.BudgetPieChartInit(canvasIdProperty);
                }

                var budgetPieChart = (function () {
                function BudgetPieChart() {
                    this.BudgetPieChartInit = function (canvasIdProperty) {
                        var $canvasElement = document.getElementById(canvasIdProperty).getContext('2d');

                        return new Chart($canvasElement, budgetPieChartConfigurations());
                    }
                }

                var budgetPieChartLabels = (function getBudgetPieChartLabels() {
                    var labels = @Html.Raw(Json.Encode(@ViewBag.ExpenditureChart));
                    return labels.map(i => i.item);
                })();

                var budgetPieChartDatas = (function getBudgetPieChartDatas() {
                    var datas = @Html.Raw(Json.Encode(@ViewBag.ExpenditureChart));
                    return datas.map(i => i.budget_total);
                })();

                var expenditureLineChartDatas = (function getBudgetPieChartDatas() {
                    var datas = @Html.Raw(Json.Encode(@ViewBag.ExpenditureChart));
                    return datas.map(i => i.expenditure_total);
                })();

                function budgetPieChartData() {

                    return {
                        labels: budgetPieChartLabels,
                        datasets: [
                            {
                                type: 'bar',
                                label: 'budget',
                                backgroundColor: 'rgba(0, 122, 204, 0.875)',
                                borderColor: 'blue',
                                barPercentage: 0.95,
                                categoryPercentage: 0.5,
                                maxBarThickness: 50,
                                data: budgetPieChartDatas,
                            },
                            {
                                type: 'bar',
                                label: 'Expenditure',
                                backgroundColor: 'rgba(255, 0, 0, 0.875)',
                                borderColor: 'red',
                                data: expenditureLineChartDatas,
                                barPercentage: 0.95,
                                categoryPercentage: 0.5,
                                maxBarThickness: 50,
                            }
                        ],
                    };
                }

                function budgetPieChartConfigurations() {

                    return {
                        // type: 'bar',
                        data: budgetPieChartData(),

                        options: {
                            responsive: true,
                            maintainAspectRatio: false,

                            scales: {
                                y: {
                                    title: {
                                        display: true,
                                        text: 'Total Price (TZS)',
                                        font: {
                                            size: 16,
                                            color: 'black'
}
                                    },
                                    ticks: {
                                        precision: 0
                                    },
                                    beginAtZero: true
                                },
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Item Name',
                                        font: {
                                            size: 16,
                                            color: 'black'
                                        }
                                    },
                                }
                            },

                            plugins: {
                                tooltips: {
                                    enabled: true,
                                    mode: 'index',
                                    intersect: false
                                },

                                hover: {
                                    mode: 'index',
                                    intersect: false
                                },

                                legend: {
                                    position: "top",

                                    labels: {
                                        usePointStyle: true,
                                        pointStyle: 'circle',

                                        font: {
                                            size: 14
                                        }
                                    },
                                },
                            },
                        },
                        plugins: [{
                            beforeInit: function (chart, args, options) {
                                var $preloaderWrapper = $('.ripple-pre-loader-wrapper');
                                $preloaderWrapper.css('display', 'flex');

                                // Get reference to the original fit function
                                const originalFit = chart.legend.fit;

                                // Override the fit function
                                chart.legend.fit = function fit() {
                                    // Call original function and bind scope in order to use `this` correctly inside it
                                    originalFit.bind(chart.legend)();
                                    // Change the height as suggested in another answers
                                    this.height += 15;
                                }
                            }
                        },
                        {
                            afterRender: function (chart, args, options) {
                                var $preloaderWrapper = $('.ripple-pre-loader-wrapper');
                                $preloaderWrapper.css('display', 'none');
                            }
                        },
                        ]
                    };
                }

                return new BudgetPieChart();
            })();


            return new BudgetChart();
        })();

        var dataTableHandler = (function () {
            return {
                Init: function (datatable_id) { return InitilizeDatatable(datatable_id); },

            };

            function InitilizeDatatable(datatable_id) {
                return $('#' + datatable_id).DataTable({
                    processing: true,
                    deferRender: true,
                    stateSave: 15,
                    language: {
                        processing:
                        "<div class='d-flex justify-content-center align-items-center h-100'>" +
                        "\t<div class='ripple-pre-loader'>" +
                        "\t\t<div></div>" +
                        "\t\t<div></div>" +
                        "\t</div>" +
                        "</div>"
                    },

                    ajax: {
                        url: '@Url.Action("ExpendituresDatatableIndex")',
                        type: "POST",
                        dataType: "json",
                    },

                    // Table serial number
                    //fnRowCallback: function (nRow, aData, iDisplayIndex) {
                    //    var oSettings = this.fnSettings();
                    //    $("td:first", nRow).html(oSettings._iDisplayStart + iDisplayIndex + 1);
                    //    return nRow;
                    //},

                    columns: [
                        {
                        title: "Sno",
                            data: 'id',
                        },
                        { data: 'Item', title: 'Item' },
                        {
                            data: 'Quantity', title: "Quantity",
                            render: function (data, type, row) {
                                return '<div class="text-end">' + numeral(data).format('0,0') + '</div>';
                            }
                        },
                        {
                            data: 'Unit_Price', title: "Unit Price (TZS)",
                            render: function (data, type, row) {
                                return '<div class="text-end">' + numeral(data).format('0,0') + '</div>';
                            }
                        },
                        {
                            data: 'Total_Price', title: "Total Price (TZS)",
                            render: function (data, type, row) {
                                return '<div class="text-end">' + numeral(data).format('0,0') + '</div>';
                            }
                        },
                        //{
                        //    data: 'Variation_From_Budget', title: "Variation From Budget (TZS)",
                        //    render: function (data, type, row) {
                        //        if (data < 0) {
                        //            return '<div class="text-end text-danger fw-b-500">' + numeral(data).format('(0,0)') + '</div>';
                        //        }
                        //        return '<div class="text-end text-success fw-b-500">' + numeral(data).format('0,0') + '</div>';
                        //    }
                        //},
                        { data: 'Remarks', title: "Remarks" },
                        //{
                        //    data: 'Status', title: "Status",
                        //    render: function (data, type, row) {
                        //        return '<div class="text-center">' + data + '</div
                        //    }
                        //},
                        //{ data: 'control_number', title: "Control Number" },
                        //{ data: 'contribution_due_date', title: "Contribution Due Date"},
                        {
                            orderable: false,
                            data: null,
                            render: function (data, type, row) {

                                var id = row.Record_Id;

                                return "<div class='position-relative'>" +
                                    "<div style='display:flex;' class='table-buttons justify-content-center'> " +
                                    "\t<button class='btn btn-outline-info btn-sm' data-id=" + id + " data-btn-type='edit' data-bs-toggle='modal' data-bs-target='#ajaxHelperUpdateModal'>" +
                                    "\t\t<i class='fas fa-pencil-alt'></i>" +
                                    "\t</button>" +
                                    //"\t<button class='btn btn-outline-danger btn-sm' data-id=" + id + " data-btn-type='delete'>" +
                                    //"\t\t<i class='fas fa-trash'></i>" +
                                    //"\t</button>" +
                                    "</div>" +
                                    "<div class='justify-content-center h-100 w-100 table-preloader'>" +
                                    "\t<div class='loading-swapping-wrapper'>" +
                                    "\t\t<div class='loading-swapping'>" +
                                    "\t\t\t<div></div>" +
                                    "\t\t\t<div></div>" +
                                    "\t\t\t<div></div>" +
                                    "\t\t</div>" +
                                    "\t</div>" +
                                    "</div>" +
                                    "</div>";
                            }
                    }
                    ],

                    "footerCallback": function (row, data, start, end, display) {
                        var api = this.api();

                        // Remove the formatting to get integer data for summation
                        var intVal = function (i) {
                            return numeral(i).value();
                        };

                        // Total over all pages
                        var totalPrice = api
                            .column(4)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);

                        // Update footer
                        $(api.column(4).footer())
                            .html('<span class="text-end d-block" style="white-space: nowrap;">Total: ' + numeral(totalPrice).format('0,0') + '</span>');

                        // Total over all pages
                        //var totalVariance = api
                        //    .column(5)
                        //    .data()
                        //    .reduce(function (a, b) {
                        //        return intVal(a) + intVal(b);
                        //    }, 0);

                        // Update footer
                        //$(api.column(5).footer())
                        //    .html('<span id="varianceTotal" class="text-end d-block" style="white-space: nowrap;">Total: ' + numeral(totalVariance).format('(0,0)') + '</span>');
                    },

                    "fnDrawCallback": function (oSettings) {
                        var $varianceTotal = $('#varianceTotal');
                        var varianceTotalValue = numeral($varianceTotal.text().replace('Total: ', '')).value();

                        if (varianceTotalValue < 0) {
                            $varianceTotal.parent().removeClass('text-success').addClass('text-danger');
                        } else {
                            $varianceTotal.parent().removeClass('text-danger').addClass('text-success');
                        }
                    }
                });
            }
        })();

        var expenditureAjaxCalls = (function () {

            //#region Budget Properties
            function Budget() {
                this.createFormElement = $('#ajaxHelperCreateForm');
                this.createModalElement = $('#ajaxHelperCreateModal');
                this.createQuantityElement = this.createFormElement.find('#Quantity_Formatted');
                this.createUnitPriceElement = this.createFormElement.find('#Unit_Price_Formatted');
                this.createTotalPriceElement = this.createFormElement.find('#Total_Price_Formatted');

                this.updateFormElement = $('#ajaxHelperUpdateForm');
                this.updateModalElement = $('#ajaxHelperUpdateModal');
                this.updateQuantityElement = this.updateFormElement.find('#Quantity_Formatted');
                this.updateUnitPriceElement = this.updateFormElement.find('#Unit_Price_Formatted');
                this.updateTotalPriceElement = this.updateFormElement.find('#Total_Price_Formatted');
            }

            //#endregion

            //#region Public Methods
            Budget.prototype.budgetInit = function () {

                resetFormFields(this.createFormElement);
                onUpdateModalOpenHandler(this.updateModalElement);

                reserFormFieldsOnModalClose(this.createFormElement);
                reserFormFieldsOnModalClose(this.updateFormElement);

                new ThousandsCommaSeparator(this.createFormElement).Init();
                new TotalPriceCalculator(this.createFormElement).Init();

                new ThousandsCommaSeparator(this.updateFormElement).Init();
                new TotalPriceCalculator(this.updateFormElement).Init();

                confirmOnSubmittingCreateForm();
                confirmOnSubmittingUpdateForm();
            }

            Budget.prototype.onBeginRequestCreate = function () {
                preloader.showPreloader(this.createFormElement)
            }

            Budget.prototype.onSuccessRequestCreate = function (data) {
                preloader.hidePreloader(this.createFormElement);

                if (data.createStatus) {
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    })

                    Toast.fire({
                        icon: 'success',
                        title: data.response
                    })
                }

                reloadDatatable();

                closeModal(this.createModalElement);
            }

            Budget.prototype.onFailureRequestCreate = function (data) {
                preloader.hidePreloader(this.createFormElement);
                closeModal(this.createModalElement);
            }


            Budget.prototype.onBeginRequestUpdate = function () {
                preloader.showPreloader(this.updateFormElement);
            }

            Budget.prototype.onSuccessRequestUpdate = function (data) {
                preloader.hidePreloader(this.updateFormElement);

                if (data.updateStatus) {
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    })

                    Toast.fire({
                        icon: 'success',
                        title: data.response
                    })
                }

                reloadDatatable();

                closeModal(this.updateModalElement);
            }

            Budget.prototype.onFailureRequestUpdate = function (data) {
                preloader.hidePreloader(this.updateFormElement);
                closeModal(this.updateModalElement);
            }

            //#endregion

            //#region Private Methods

            function confirmOnSubmittingCreateForm() {
                var $ajaxHelperCreateForm = expenditureAjaxCalls.createFormElement;

                $ajaxHelperCreateForm.on('click', 'button[type=submit]', function (e) {
                    e.preventDefault();

                    if ($ajaxHelperCreateForm.valid() && !isInternationalMobileNumberValid($ajaxHelperCreateForm)) {
                Swal.fire({
                    //title: 'Are you sure?',
                    text: "Do you want to add expenditure record?",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes!'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $ajaxHelperCreateForm.submit();
                            }
                        });
            }

                });
            }

            function confirmOnSubmittingUpdateForm() {
                var $ajaxHelperUpdateForm = expenditureAjaxCalls.updateFormElement;

                $ajaxHelperUpdateForm.on('click', 'button[type=submit]', function (e) {
                    e.preventDefault();

                    if ($ajaxHelperUpdateForm.valid() && !isInternationalMobileNumberValid($ajaxHelperUpdateForm)) {
                Swal.fire({
                    //title: 'Are you sure?',
                    text: "Do you want to edit this expenditure record?",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes!'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $ajaxHelperUpdateForm.submit();
                            }
                        });
            }

                });
            }

            function isInternationalMobileNumberValid($form) {
                return $form.find('.intl-mobile-number').hasClass('invalid-mobile-number');
            }

            function TotalPriceCalculator($form) {
                this.quantity = $form.find('#Quantity_Formatted');
                this.unitPrice = $form.find('#Unit_Price_Formatted');
                this.totalPrice = $form.find('#Total_Price_Formatted');

                this.Init = function () {
                    calculateTotalPriceOnForm(this.quantity, this.unitPrice, this.totalPrice);
                }

                function calculateTotalPriceOnForm($quantity, $unitPrice, $totalPrice) {
                    $quantity.on('change keyup', function () { totalPriceHandler($quantity, $unitPrice, $totalPrice)});
                    //$quantity.on('keyup', function () { totalPriceHandler($quantity, $unitPrice, $totalPrice) });

                    $unitPrice.on('change keyup', function () { totalPriceHandler($quantity, $unitPrice, $totalPrice)});
                    //$unitPrice.on('keyup', function () { totalPriceHandler($quantity, $unitPrice, $totalPrice)});
                }

                function totalPriceHandler($quantity, $unitPrice, $totalPrice) {
                if (checkIfElementIsEmptyOrNull($unitPrice)) {
                    var totalPrice = getTotalPrice($quantity, $unitPrice);
                        $totalPrice.val(totalPrice);
                }
            }

            function stripCommaSeparators(valueWithCommaSeparator) {
                return valueWithCommaSeparator.replace(/[\$,]/g, '');
            };

            function getTotalPrice($quantity, $unitPrice) {
                var totalPrice = stripCommaSeparators($quantity.val()) * stripCommaSeparators($unitPrice.val());
                return numeral(totalPrice).format('0,0')
                }

            function checkIfElementIsEmptyOrNull($inputElement) {
                return $inputElement.val().length > 0;
            }
            }

            function ThousandsCommaSeparator($form) {
                this.quantity = $form.find('#Quantity_Formatted');
                this.unitPrice = $form.find('#Unit_Price_Formatted');

                this.Init = function () {
                    initializeThousandsCommaSeparator(this.quantity);
                    initializeThousandsCommaSeparator(this.unitPrice);
                }

                function initializeThousandsCommaSeparator($input) {
                    new Cleave($input, {
                        numeral: true,
                        numeralThousandsGroupStyle: 'thousand'
                    });
                }

            }


            function resetFormFields($form) {
                var $formElements = $form.find('.form-control');

                $.each($formElements, function (index, formElement) {
                    $(formElement).val('');
                });
            }

            function reloadDatatable() {
                budgetingTable.ajax.reload();
            }



            function closeModal($modal) {
                $modal.find('.btn-close').click();
            }

            function reserFormFieldsOnModalClose($form) {
                $form.find('.modal').on('hidden.bs.modal', function () {
                    resetFormFields($form);
                    validateFormElementsOnModalClose($form)
                });
            }

            function validateFormElementsOnModalClose($form) {
                var $field = $form.find('.input-validation-error');
                var $spanErrorWrapper = $form.find('.field-validation-error')

                //Validate the field
                $field.removeClass('input-validation-error').addClass('valid');
                $field.attr('aria-invalid', 'false');

                //Validate the span error wrapper and remove the span error message
                $spanErrorWrapper.removeClass('field-validation-error').addClass('field-validation-valid');
                $spanErrorWrapper.empty();
            }

            function onUpdateModalOpenHandler($updateModal) {
                var $table = $('#expenditure-datatable');

                $table.find('tbody').on('click', 'tr button[data-btn-type="edit"]', function () {

                    var $tr = $(this).closest('tr');

                    var row_data = budgetingTable.row($tr).data();


                    //$updateModal.on('show.bs.modal', function () {
                        populateUpdateFormWithTableData($updateModal, row_data);
                    //});
                });
            }

            function populateUpdateFormWithTableData($updateModal, row_data) {

                var itemValue = getSelectValueForDropdownList($updateModal, row_data.Item);
                var quantity_formated = numeral(row_data.Quantity).format('0,0');
                var unit_price_formated = numeral(row_data.Unit_Price).format('0,0');
                var total_price_formated = numeral(row_data.Total_Price).format('0,0');

                var budgeted_quantity = numeral(row_data.Budgeted_Quantity).format('0,0');
                var budgeted_total = numeral(row_data.Budgeted_Total).format('0,0');

                $updateModal.find('#Record_Id').val(row_data.Record_Id);
                $updateModal.find('#Budget_Record_Id').val(itemValue);
                $updateModal.find('#Quantity_Formatted').val(quantity_formated);
                $updateModal.find('#Unit_Price_Formatted').val(unit_price_formated);
                $updateModal.find('#Total_Price_Formatted').val(total_price_formated);
                $updateModal.find('#Remarks').val(row_data.Remarks);
                $updateModal.find('#Service_Provider').val(row_data.Service_Provider);
                $updateModal.find('#Budgeted_Quantity').val(budgeted_quantity);
                $updateModal.find('#Total_Budgeted').val(budgeted_total);

                var $mobileNumber = $updateModal.find('#SPU_Mobile_Number').get(0);

                if (row_data.SP_Mobile_Number) {
                    var iti = window.intlTelInputGlobals.getInstance($mobileNumber);
                    iti.setNumber(row_data.SP_Mobile_Number);
                }

            }

            function getSelectValueForDropdownList($updateModal, optionItemText) {
                var $optinItemList = $updateModal.find('#Budget_Record_Id option');
                var optionItemValue = '';

                $.map($optinItemList, function (value, index) {
                    if ($(value).text().trim() === optionItemText) {
                        optionItemValue = $(value).val();
                    }
                });
                return optionItemValue;
            }

            function tableCellValue($tableCells, cell_id) {
                return $tableCells.eq(cell_id).text().trim()
            }

            var preloader = (function () {
                function PreLoader() {
                    this.preloaderElement = '.modal_pre-loader';
                }

                PreLoader.prototype.showPreloader = function ($form) {
                    $form.find(this.preloaderElement).show();
                }

                PreLoader.prototype.hidePreloader = function($form) {
                    $form.find(this.preloaderElement).hide();
                }

                @{ #region Object Initiation}
                return new PreLoader();
            }());
            @{ #endregion;}

            //#endregion


            return new Budget();
        }());

        function displayExpenditureVarianceTotal() {

            budgetingTable.on('xhr', function () {
                var $varianceTotal = $('#varianceTotal');
                var varianceTotalValue = numeral($varianceTotal.text().replace('Total: ', '')).format('0,0');

                if (varianceTotalValue < 0) {
                    $varianceTotal.parent().addClass('text-success');
                } else {
                    $varianceTotal.parent().addClass('text-danger');
                }
            });
        }


        var budgetingDetailResponse = (function () {

            function BudgetingDetails() {

            }

            BudgetingDetails.prototype.RespondToItemChangeOnCreateForm = function () {
                var $form = $('#ajaxHelperCreateForm');
                onItemChangeHandler($form)
            }

            BudgetingDetails.prototype.RespondToItemChangeOnUpdateForm = function () {
                var $form = $('#ajaxHelperUpdateForm');
                onItemChangeHandler($form)
            }


            function onItemChangeHandler($form) {
                var $itemField = $form.find("#Budget_Record_Id");

                var datas = @Html.Raw(Json.Encode(@ViewBag.BudgetingDetails));

                $itemField.on('change', function () {

                    var $budgetedQuantity = $form.find("#Budgeted_Quantity");
                    var $budgetedTotal = $form.find("#Total_Budgeted");
                    var formatedBudgetedQuantity, formatedBudgetedTotal;

                    datas.forEach(function (value, index) {
                        if (value.id == $itemField.val()) {
                            formatedBudgetedQuantity = numeral(value.quantity).format('0,0');
                            formatedBudgetedTotal = numeral(value.total_price).format('0,0');

                            $budgetedQuantity.val(formatedBudgetedQuantity);
                            $budgetedTotal.val(formatedBudgetedTotal);
                        }
                    });

                });
            }


            return new BudgetingDetails();
        }());

        $(document).ready(function () {
            budgetingTable = dataTableHandler.Init('expenditure-datatable');

            expenditureAjaxCalls.budgetInit();

            budgetChartModal.Init();

            intl_tel_input.InitilizeUpdateForm();

            intl_tel_input.InitilizeOnCreateForm();

            budgetingDetailResponse.RespondToItemChangeOnCreateForm();

            budgetingDetailResponse.RespondToItemChangeOnUpdateForm();

        });


        function OnBeginRequestCreate() {
            expenditureAjaxCalls.onBeginRequestCreate();
        }

        function OnSuccessRequestCreate(data) {
            expenditureAjaxCalls.onSuccessRequestCreate(data);
        }

        function OnFailureRequestCreate(data) {
            expenditureAjaxCalls.onFailureRequestCreate(data);
        }

        function OnBeginRequestUpdate() {
            expenditureAjaxCalls.onBeginRequestUpdate();
        }

        function OnSuccessRequestUpdate(data) {
            expenditureAjaxCalls.onSuccessRequestUpdate(data);
        }

        function OnFailureRequestUpdate(data) {
            expenditureAjaxCalls.onFailureRequestUpdate(data);
        }

    </script>
}


