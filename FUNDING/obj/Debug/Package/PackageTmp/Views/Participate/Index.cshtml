
@model FUNDING.Models.Participate
@{
    ViewBag.Title = "Index";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="Description" content="Enter your description here" />
    @*<script src="/js/jquery.min.js"></script>*@
    <link href="~/Scripts/intl-tel-input/css/isValidNumber.css" rel="stylesheet" />
    <link href="~/Scripts/intl-tel-input/css/intlTelInput.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/assets/bootstrap-4.5.3-dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/assets/fontawesome-free-5.15.3-web/css/all.min.css">
    <link rel="stylesheet" href="~/css/login-style.min.css">
    <link rel="stylesheet" href="~/css/custom.css">
    <script src="~/assets/scripts/jQuery.min.js"></script>
    <title>Participants | B-envit</title>
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    <link href="~/select2/css/select2.min.css" rel="stylesheet" />

    <link rel="stylesheet" href="~/assets/datepicker/gijgo.min.css">
    <style>

        .select2.select2-container.select2-container--default,
        .iti.iti--allow-dropdown.iti--separate-dial-code {
            width: 100%;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow,
        .select2-container .select2-selection--single {
            height: 38px !important;
        }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 38px;
        }


        .login-box .card {
            width: 100%;
            max-width: 35.125rem;
            -webkit-box-shadow: 0 2px 1px rgba(0, 0, 0, 0.05);
            box-shadow: 0 2px 1px rgba(0, 0, 0, 0.05);
        }

        div.footer {
            height: 100px;
        }

            div.footer p {
                font-size: 0.75rem;
            }

        .co-operate--wrapper {
            width: 60px;
            height: 60px;
        }

        .co-operate-logo--wrapper {
          background: url('../../images/Biz-Logic Round Logo.png');
             @* background: url('../../images/malkia.png');*@
            background-position: center;
            background-size: contain;
            background-repeat: no-repeat;
            width: 100%;
            height: inherit;
        }

        .gj-picker-bootstrap .selected {
            color: #4F4F4F;
        }

            .gj-picker-bootstrap .selected[role=am],
            .gj-picker-bootstrap .selected[role=pm] {
                font-weight: 500;
            }
    </style>
</head>

<body>

    <div class="container-fluid px-0">
        <div class="row mx-0">
            <div class="main-area col-12 px-0">
                <div class="login-box" style="
                                        background-position: center;
                                        background-color: rgba(0,0,0,.05);
                                        /* margin-top: 0px; */
                                        background-image: url('/images/malkia.png');
                                        /* background: center; */
                                        background-size: cover;
                                        background-repeat: no-repeat;
                                        background-size: 1225px 1180px;
                                        background-attachment: fixed; ">

                    <div class="card border-grey border-lighten-3 m-0" style="background-color:#ffffffe3;">
                        <div class="card-header border-0 pb-1">
                            <div class="card-title text-center">
                                <div class="p-1">
                                    <img class="img-thumbnail mt-4" src="~/images/logo_placeholder.png" alt="branding logo" />
                                    <img class="img-thumbnail mt-4" src="~/images/malkia.png" alt="branding logo" />
                                </div>
                           
                            <h1 class="card-subtitle line-on-side h5 text-muted text-center text-uppercase">
                                <span>B-Envit</span>
                            </h1>
                        </div>
                        <div class="modal-body">

                            @Html.AntiForgeryToken()
                            <div class="form-horizontal" id="formreg">
                                <h4 class="text-center">Registration for Participation</h4>
                                <hr />
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                @Html.Hidden("Int_Mobile_number")
                                @* <div class="form-group">
                                            @Html.LabelFor(model => model.pat_sno, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.pat_sno, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.pat_sno, "", new { @class = "text-danger" })
                                            </div>
                                    </div>*@

                                <div class="form-group row">
                                    @Html.LabelFor(model => model.fullname, htmlAttributes: new { @class = "col-form-label col-md-4 col-lg-4 col-xl-3" })
                                    <div class="col-md-8 col-lg-8 col-xl-9">
                                        @Html.EditorFor(model => model.fullname, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.fullname, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group row">
                                    @Html.LabelFor(model => model.phone_number, htmlAttributes: new { @class = "col-form-label col-md-4 col-lg-4 col-xl-3" })
                                    <div class="col-md-8 col-lg-8 col-xl-9">
                                        @Html.EditorFor(model => model.phone_number, new { htmlAttributes = new { @class = "form-control" } })
                                        @*  @Html.ValidationMessageFor(model => model.phone_number, "", new { @class = "text-danger" })*@
                                        <span id="intl-input-error" class="d-none text-danger"></span>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    @Html.LabelFor(model => model.gender, htmlAttributes: new { @class = "col-form-label col-md-4 col-lg-4 col-xl-3" })
                                    <div class="col-md-8 col-lg-8 col-xl-9">
                                        @Html.DropDownList("gender", new SelectList(ViewBag.statusList, "Text", "Value"), htmlAttributes: new { @id = "gender", @class = "form-control" })
                                        @* @Html.EditorFor(model => model.gender, new { htmlAttributes = new { @class = "form-control" } })*@
                                        @Html.ValidationMessageFor(model => model.gender, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group row">
                                    @Html.LabelFor(model => model.dob, htmlAttributes: new { @class = "col-form-label col-md-4 col-lg-4 col-xl-3" })
                                    <div class="col-md-8 col-lg-8 col-xl-9">
                                        <input type="text" id="dob" name="dob" class="form-control" data-val="true" />
                                        @* @Html.EditorFor(model => model.dob, new { htmlAttributes = new { @class = "form-control" } })*@
                                        @Html.ValidationMessageFor(model => model.dob, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group row">
                                    @Html.LabelFor(model => model.region, htmlAttributes: new { @class = "col-form-label col-md-4 col-lg-4 col-xl-3" })
                                    <div class="col-md-8 col-lg-8 col-xl-9">
                                        @Html.DropDownListFor(model => model.region, ViewBag.regions as IEnumerable<SelectListItem>, "Select region", htmlAttributes: new { @class = "form-control" })
                                        @*@Html.EditorFor(model => model.region, new { htmlAttributes = new { @class = "form-control" } })*@
                                        @Html.ValidationMessageFor(model => model.region, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group row">
                                    @Html.LabelFor(model => model.district, htmlAttributes: new { @class = "col-form-label col-md-4 col-lg-4 col-xl-3" })
                                    <div class="col-md-8 col-lg-8 col-xl-9">
                                        @Html.DropDownListFor(model => model.district, ViewBag.districts as IEnumerable<SelectListItem>, "Select district", htmlAttributes: new { @class = "form-control" })
                                        @*@Html.EditorFor(model => model.district, new { htmlAttributes = new { @class = "form-control" } })*@
                                        @Html.ValidationMessageFor(model => model.district, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group row">
                                    @Html.LabelFor(model => model.entrepreneur_status, htmlAttributes: new { @class = "col-form-label col-md-4 col-lg-4 col-xl-3" })
                                    <div class="col-md-8 col-lg-8 col-xl-9">
                                        @Html.DropDownListFor(model => model.entrepreneur_status, ViewBag.entreprenuer as IEnumerable<SelectListItem>, htmlAttributes: new { @class = "form-control mw-100" })

                                        @* @Html.EditorFor(model => model.ward, new { htmlAttributes = new { @class = "form-control" } })*@
                                        @Html.ValidationMessageFor(model => model.entrepreneur_status, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.opportunity, htmlAttributes: new { @class = "col-form-label col-md-4 col-lg-4 col-xl-3" })
                                    <div class="col-md-8 col-lg-8 col-xl-9">
                                        @Html.DropDownList("Opportunity", ViewBag.opportunity as IEnumerable<SelectListItem>, htmlAttributes: new { @multiple = "multiple", @id = "opportunity", @class = "form-control mw-100 multiple" })

                                        @* @Html.EditorFor(model => model.ward, new { htmlAttributes = new { @class = "form-control" } })*@
                                        @Html.ValidationMessageFor(model => model.opportunity, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group row">
                                    @Html.LabelFor(model => model.business_sector, htmlAttributes: new { @class = "col-form-label col-md-4 col-lg-4 col-xl-3" })
                                    <div class="col-md-8 col-lg-8 col-xl-9">
                                        @Html.DropDownList("e", ViewBag.business as IEnumerable<SelectListItem>, htmlAttributes: new { @multiple = "multiple", @id = "business_sector", @class = "form-control mw-100 multiple" })

                                        @* @Html.EditorFor(model => model.ward, new { htmlAttributes = new { @class = "form-control" } })*@
                                        @Html.ValidationMessageFor(model => model.business_sector, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <div class="col-lg-offset-4 col-xs-offset-6 col-md-offset-6 col-md-6 col-lg-8 col-xs-6">
                                        <input type="submit" value="Register" id="patsubmit" class="btn btn-primary btn-rounded" />
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="text-center">
                            @*@Html.ActionLink("Back Home", "Login")*@
                            <a href="/">Return to Login Page</a>
                        </div>

                    </div>
                </div>
                    </div>
                <div class="footer px-2">
                    <p class="mb-0">
                        Designed &amp; Developed by
                        <a class="links" href="http://bizlogicsolutions.com/" target="_blank">Biz-Logic Solutions Ltd.</a>
                    </p>
                    <div class="co-operate--wrapper">
                        <div class="co-operate-logo--wrapper"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="~/assets/popperjs-1.16.1/popper.min.js"></script>
    <script src="~/assets/bootstrap-4.5.3-dist/js/bootstrap.min.js"></script>
    <script src="~/Script/bootstrap-notify.min.js"></script>
    <script src="~/assets/datepicker/gijgo.min.js"></script>
    <script src="~/js/validations.js"></script>
    <script src="~/Scripts/intl-tel-input/js/intlTelInput-jquery.min.js"></script>
    <script src="~/Scripts/intl-tel-input/js/intlTelInput.js"></script>
    <script src="~/js/main.js"></script>
    <script src="~/select2/js/select2.min.js"></script>


    <script>
            $(document).ready(function () {
                $("#patsubmit").click(function (e) {
                    e.preventDefault();
                    addReg();
                });

                $('#opportunity').select2();
                $('#entrepreneur_status').select2();
                $('#business_sector').select2();

                $('#dob').change(function () {
                    var dob = new Date($(this).val());
                    var minAge = 15;
                    var minDate = new Date();
                    minDate.setFullYear(minDate.getFullYear() - minAge);

                    if (dob > minDate) {
                        alert('Age must be at least ' + minAge + ' years old.');
                        $(this).val(''); // Clear the input field
                    }
                });
                $('#phone_number').change(function () {
                    var phone_number = $(this).val();
                    var minAge = 9;
                    var minDate = new Date();
                    minDate.setFullYear(minDate.getFullYear() - minAge);

                    if (phone_number <= minAge) {
                        alert('Phone number must be at least ' + minAge + ' number');
                        //$(this).val(''); // Clear the input field
                    }
                });

                districtDropdownListHandler();
                wardDropdownListHandler();


                $("#dob").datepicker({
                    format: 'dd/mm/yyyy',
                    //format: 'dddd, dd mmmm yyyy',
                    //calendarWeeks: true,
                    uiLibrary: 'bootstrap4',
                    iconsLibrary: 'fontawesome',
                    modal: true,
                    header: true,
                    footer: true,
                });
                intl_tel_input.InitilizeOnCreateForm();
                intl_tel_input.InitilizeUpdateForm();

                validateWhetherMobileNumberExists($ajaxHelperCreateForm);
                validateWhetherMobileNumberExists($ajaxHelperUpdateForm);
            });


        function districtDropdownListHandler() {
            var $regionDropdownList = $('#region');

            $regionDropdownList.on('change', function () {
                var regionId = $regionDropdownList.val();

                // Send Data to Controller On change Event Id
                 $.ajax({
                    type: 'POST',
                     url: '@Url.Action("getDistricts")/' + regionId,

                     success: function (data) {
                         console.log(data);
                         var s = '<option value="-1">Please Select district</option>';
                         for (var i = 0; i < data.visitorSelectionList.length; i++) {
                             s += '<option value="' + data.visitorSelectionList[i].Value + '">' + data.visitorSelectionList[i].Text + '</option>';
                         }
                        // console.log(data.visitorSelectionList[0]);

                         $("#district").html(s);

                    }
                });

            });

        }
         function wardDropdownListHandler() {
            var $districtDropdownList = $('#district');

             $districtDropdownList.on('change', function () {
                 var districtId = $districtDropdownList.val();

                // Send Data to Controller On change Event Id
                 $.ajax({
                    type: 'POST',
                     url: '@Url.Action("getWards")/' + districtId,

                     success: function (data) {
                         console.log(data);
                         var s = '<option value="-1">Select Ward</option>';
                         for (var i = 0; i < data.visitorSelectionList.length; i++) {
                             s += '<option value="' + data.visitorSelectionList[i].Value + '">' + data.visitorSelectionList[i].Text + '</option>';
                         }
                        // console.log(data.visitorSelectionList[0]);

                         $("#ward").html(s);

                    }
                });

            });

        }


            function initDatePicker($form) {
        var $eventDate = $form.find('#dob');
        //var $timepicker = $form.find('#Event_Start_Time');

        $eventDate.datepicker({
            //format: 'dd/mm/yyyy',
            format: 'dddd, dd mmmm yyyy',
            //calendarWeeks: true,
            uiLibrary: 'bootstrap4',
            iconsLibrary: 'fontawesome',
            modal: true,
            header: true,
            footer: true,
        });

        $timepicker.timepicker({
            format: 'h:MM TT',
            //calendarWeeks: true,
            uiLibrary: 'bootstrap4',
            iconsLibrary: 'fontawesome',
            //modal: false,
            //header: false,
            //footer: false,
            icons: {
                rightIcon: '<i class="far fa-clock"></i>'
            }
        });
        }


         var intl_tel_input = (function () {

            function Intl_Tel_Input() {
                this.createFormElement = $('#formreg');
                //this.updateFormElement = $('#ajaxHelperUpdateForm');
            }

            Intl_Tel_Input.prototype.InitilizeUpdateForm = function () {

                var $form = this.updateFormElement.get(0);

                var $mobileNumber = $form.querySelector("#phone_number");

                initilize_intlTelInput($mobileNumber);

                ValidateInternationMobileNumber($form, $mobileNumber);

            }

            Intl_Tel_Input.prototype.InitilizeOnCreateForm = function () {

                var $form = this.createFormElement;
                var $mobileNumber = document.querySelector("#phone_number");

                initilize_intlTelInput($mobileNumber);

                ValidateInternationMobileNumber($form.get(0), $mobileNumber);

                var $modal = this.createFormElement.find('.modal');
                var iti = window.intlTelInputGlobals.getInstance($mobileNumber);

                $modal.on('show.bs.modal', function () {
                    iti.setCountry("tz");
                    $form.find("#intl-input-error").addClass('d-none');
                });
            }

            // here, the index maps to the error code returned from getValidationError - see readme
            function getErrorMapArray() {
                var errorMap = [
                    "Please enter a valid mobile operator code",
                    "Invalid country code",
                    "The mobile number is too short",
                    "The mobile number is too long",
                    "Please enter a valid mobile number"];

                return errorMap;
            }

            function initilize_intlTelInput($mobileNumber) {

                 window.intlTelInput($mobileNumber, {
                    // allowDropdown: false,
                    // autoHideDialCode: false,
                    // autoPlaceholder: "off",
                    dropdownContainer: document.body,
                    // excludeCountries: ["us"],
                    formatOnDisplay: false,
                    // geoIpLookup: function(callback) {
                    //   $.get("http://ipinfo.io", function() {}, "jsonp").always(function(resp) {
                    //     var countryCode = (resp && resp.country) ? resp.country : "";
                    //     callback(countryCode);
                    //   });
                    // },
                    //hiddenInput: "full_number",
                    //initialCountry: "auto",
                    // localizedCountries: { 'de': 'Deutschland' },
                    //nationalMode: false,
                    // onlyCountries: ['us', 'gb', 'ch', 'ca', 'do'],
                    //placeholderNumberType: "MOBILE",
                    preferredCountries: ['tz'],
                    separateDialCode: true,
                    utilsScript: "@Url.Content("~/Scripts/intl-tel-input/js/utils.js")",
                 });
            }

            function ValidateInternationMobileNumber($form, $input) {
                var iti = window.intlTelInputGlobals.getInstance($input);

                $input.addEventListener('keyup', reset($form));
                $input.addEventListener('change', reset($form));

                $input.addEventListener('blur', function () {
                    reset($form);

                    $input.classList.remove("invalid-mobile-number");

                    var mobileNumberValue = $input.value.trim();
                    var isOnlyDigits = new RegExp(/^\d+$/);

                    var $intl_tel_errorMsg = $form.querySelector("#intl-input-error");

                    if (mobileNumberValue) {
                        if (isOnlyDigits.test(mobileNumberValue)) {
                            if (!iti.isValidNumber()) {
                                var errorCode = iti.getValidationError();
                                var errorMap = getErrorMapArray();

                                if (errorCode >= 0 && errorCode < errorMap.length) {
                                    $intl_tel_errorMsg.innerHTML = errorMap[errorCode];
                                    $intl_tel_errorMsg.classList.remove("d-none");
                                    $intl_tel_errorMsg.classList.add("d-block");
                                    $input.classList.add("invalid-mobile-number");
                                }

                            } else {
                                $input.classList.remove("invalid-mobile-number");
                                var $intl_tel_mobileNumber = $form.querySelector("#Int_Mobile_number");
                                $intl_tel_mobileNumber.value = iti.getNumber();
                            }

                        } else {
                            $input.classList.add("invalid-mobile-number");
                            $intl_tel_errorMsg.classList.remove("d-none");
                            $intl_tel_errorMsg.classList.add("d-block");
                            $intl_tel_errorMsg.innerHTML = "Please enter a valid mobile number";
                        }
                    }
                });

            }

            function reset($form){
                var $intl_tel_errorMsg = $form.querySelector("#intl-input-error");

                $intl_tel_errorMsg.innerHTML = "";
                $intl_tel_errorMsg.classList.remove("d-block");
                $intl_tel_errorMsg.classList.add("d-none");
            };


            return new Intl_Tel_Input();
        })();


        function addReg() {

            var message = validateEmployeeoff(),
                type = '';
            if (message.length > 0) {
                notifyMessage(message, 'danger');
            }
            else {

                var params = JSON.stringify(getSMTPValues());
                console.log(params);
                //$.noConflict();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Register", "Participate")',
                    data: params,
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (data) {

                        //notifyMessage(data.message, 'success');
                        alert(data.message);
                        location.reload();

                    }
                });

            }
        }

        function resetFormFields($form) {
            $form.find('#fullname').val('');
            $form.find('#gender').val('');
            $form.find('#phone_number').val('');
            $form.find('#district').val('');
            $form.find('#dob').val('');
            $form.find('#region').val('');
            $form.find('#opportunity').val('');
            $form.find('#business').val('');
            $form.find('#entrepreneur_status').val('');
            //$form.find('#ward').val('');

        }

        function getSMTPValues() {

        var fullname = document.getElementById('fullname');
        var gender = $("#gender").val();
        var dob = document.getElementById('dob');
        var phone = document.getElementById('phone_number');
        var region = $("#region").val();
        var district = $("#district").val();
        var ward = $("#opportunity").val();
        var business = $("#business_sector").val();
        var entre = $("#entrepreneur_status").val();

        var data = {
            fullname: fullname.value,
            gender: gender,
            dob: dob.value,
            phone_number: phone.value,
            region: region,
            district: district,
            opportunity: ward,
            business_sector: business,
            entrepreneur_status: entre,

        }

        return data;
    }

        function validateEmployeeoff() {

        var fullname = document.getElementById('fullname');
        var gender = $("#gender").val();

        var dob = document.getElementById('dob');
        var phone = document.getElementById('phone_number');
        var region = $("#region").val();
        var district = $("#district").val();
        var ward = $("#opportunity").val();

        result = '';

        if (phone.value.length == 0) {
            result += 'Mobile Number is Required.<br/>';
        }

        @*if (!checkValidMobileNumber(phone.value)) {
            result += 'Please enter valid mobile number.<br/>';
        }*@
        if (fullname.value.length == 0) {
            result += 'Name is Required.<br/>';
        }
        if (region.length == 0) {
            result += 'Region is Required.<br/>';
        }
        if (district.length == 0) {
            result += 'District is Required.<br/>';
        }
        if (ward.length == 0) {
            result += 'Opportunity is Required.<br/>';
        }
        @*if (gender.value.length == 0) {
            result += 'Gender is Required.<br/>';
        }*@

        return result;
    }

        function checkValidMobileNumber(mobileNumber) {
            var mobileNumberRegex = mobileNumber.match("^[0-9]{10}$");
            return (mobileNumberRegex != null) ? true : false;
        }

        function refreshPageOnModalClose() {
            $('#eventModal').on('hidden.bs.modal', function () {

                clearEventSelectionsOptions($eventDropdownList);

                location.reload();
            });
        }

        function populateEventSelections(data, $eventDropdownList) {

            clearEventSelectionsOptions($eventDropdownList);

            var userEventDetails = data.eventDetails;

            $eventDropdownList.append("<option value=''>Select event</option>");

            $.each(userEventDetails, function (index, value) {
                $eventDropdownList.append("<option value='" + value.event_det_sno + "'>" + value.event_name+"</option>");
            });

        }

        function clearEventSelectionsOptions($eventDropdownList) {
            $eventDropdownList.empty();
        }

    </script>
</body>

</html>

