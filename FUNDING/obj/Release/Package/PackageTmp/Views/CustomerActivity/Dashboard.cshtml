@using System.Collections.Generic
@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_Customers.cshtml";

    ViewData["Title"] = "Dashboard";
    ViewData["Home"] = "Home";
}


<div class="row page-titles">
    <div class="col-md-5 align-self-center">
        <h4 class="text-themecolor">@ViewData["Title"]</h4>
    </div>
    <div class="col-md-7 align-self-center text-end">
        <div class="d-flex justify-content-end align-items-center">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="@Url.Action("Dashboard", "CustomerActivity")">@ViewData["Home"]</a></li>
                <li class="breadcrumb-item active">@ViewData["Title"]</li>
            </ol>
        </div>
    </div>
</div>

<!-- Counters: Start -->
<div class="row">
    <div class="col-md-4">
        <div class="card border-0">
            <div class="card-body counter-wrapper">
                <div class="counter-icon text-info">
                    <i class="fas fa-users fa-4x"></i>
                </div>
                <div class="counter-info-wrapper">
                    <h4 class="m-0 text-black-50 text-bold-600 text-end">Invitees</h4>
                    <div id="total-invitees" class="h1 m-0 text-end"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card border-0">
            <div class="card-body counter-wrapper">
                <div class="counter-icon text-success">
                    <i class="fas fa-donate fa-4x"></i>
                </div>
                <div class="counter-info-wrapper">
                    <h4 class="m-0 text-black-50 text-bold-600 text-end">Pledges</h4>
                    <div id="total-contributions" class="h1 m-0 text-end"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card border-0">
            <div class="card-body counter-wrapper">
                <div class="counter-icon text-danger">
                    <i class="fas fa-money-check fa-4x"></i>
                </div>
                <div class="counter-info-wrapper">
                    <h4 class="m-0 text-black-50 text-bold-600 text-end">Expenditures</h4>
                    <div id="total-expenditure" class="h1 m-0 text-end"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Counters: End -->

<div class="row">
    <div class="col-lg-6">
        <div class="card border-0">
            <div class="card-body">
                <h4 class="card-title">
                    Invitees per Card Size
                </h4>
                <hr />
                @Html.Partial("_InviteesChart")
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="card border-0">
            <div class="card-body">
                <h4 class="card-title">
                    Budget vs Expenditure Chart
                </h4>
                <hr />
                @Html.Partial("_budget_vs_expenditureChart")
            </div>
        </div>
    </div>
</div>


@section styles{
    <link href="~/Content/Site.css" rel="stylesheet" />


    <style>
        .counter-wrapper {
            display: inline-flex;
            justify-content: space-between;
        }

        .counter-info-wrapper {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }


        @@media (min-width: 768px) {
            .counter-info-wrapper > h4 {
                font-size: 1rem;
            }

            .counter-info-wrapper > div {
                font-size: 1.25rem;
            }
        }

        @@media (min-width: 992px) {
            .counter-info-wrapper > h4 {
                font-size: 1.15rem;
            }

            .counter-info-wrapper > div {
                font-size: 1.75rem;
            }
        }

        @@media (min-width: 1200px) {
            .counter-info-wrapper > h4 {
                font-size: 1.25rem;
            }

            .counter-info-wrapper > div {
                font-size: 2.25rem;
            }
        }
    </style>
}

@section scripts{
    <script src="~/Scripts/numeral.min.js"></script>
    <script src="~/Scripts/chart.min.js"></script>


    <script>
        var dashboardConters = (function () {
            function DashboardCounters() { }

            DashboardCounters.prototype.Init = function () {
                displayTotalInviteesCounter();

                displayTotalContributions();

                displayTotalExpenditures();
            }

            function displayTotalInviteesCounter() {
                var $counterElement = $("#total-invitees");
                var totalInvitees = @ViewBag.TotalVisitors;

                $counterElement.text(numeral(totalInvitees).format('0,0'));
            }

            function displayTotalContributions() {
                var $contributionElement = $('#total-contributions');
                var totalContributions = @ViewBag.TotalContributions;

                $contributionElement.text(numeral(totalContributions).format('0,0'));
            }

            function displayTotalExpenditures() {
                var $expenditureElement = $('#total-expenditure');
                var totalExpenditures = @ViewBag.TotalExpenditures;

                $expenditureElement.text(numeral(totalExpenditures).format('0,0'));
            }

            return new DashboardCounters();
        })();

        var inviteesChart = (function () {
        function InviteesChart() {}

        InviteesChart.prototype.initiliazeInviteesChart = function (canvasIdProperty) {

            return budgetVsExpenditureChart.InviteesChartInit(canvasIdProperty);
        }

        var budgetVsExpenditureChart = (function () {
            function InviteesChart() {
                this.InviteesChartInit = function (canvasIdProperty) {
                    var $canvasElement = document.getElementById(canvasIdProperty).getContext('2d');

                    return new Chart($canvasElement, budgetVsExpenditureChartConfigurations());
                }
            }

            var cardSizeLabels = (function getInviteesChartLabels() {
                var labels = @Html.Raw(Json.Encode(@ViewBag.cardSizeInviteesVerificationData));
                return labels.map(i => i.card_size);
            })();

            var cardSizeInviteesData = (function getInviteesChartDatas() {
                var datas = @Html.Raw(Json.Encode(@ViewBag.cardSizeInviteesVerificationData));
                return datas.map(i => i.total_invitees);
            })();

            var cardSizeCheckingInData = (function getCheckingInChartDatas() {
                var datas = @Html.Raw(Json.Encode(@ViewBag.cardSizeInviteesVerificationData));
                return datas.map(i => i.total_verified_invitees);
            })();

            function budgetVsExpenditureChartData() {

                return {
                    labels: cardSizeLabels,
                    datasets: [
                        {
                            type: 'bar',
                            label: 'Invitees Count',
                            backgroundColor: 'rgba(0, 122, 204, 0.875)',
                            borderColor: 'blue',
                            barPercentage: 0.95,
                            categoryPercentage: 0.5,
                            maxBarThickness: 50,
                            data: cardSizeInviteesData,
                        },
                        {
                            type: 'bar',
                            label: 'Check-in Count',
                            backgroundColor: 'green',
                            borderColor: 'blue',
                            barPercentage: 0.95,
                            categoryPercentage: 0.5,
                            maxBarThickness: 50,
                            data: cardSizeCheckingInData,
                        }
                    ],
                };
            }

            function budgetVsExpenditureChartConfigurations() {

                return {
                    // type: 'bar',
                    data: budgetVsExpenditureChartData(),

                    options: {
                        responsive: true,
                        maintainAspectRatio: false,

                        scales: {
                            y: {
                                title: {
                                    display: true,
                                    text: 'Invitees',
                                    font: {
                                        size: 16,
                                        color: 'black'
}
                                },
                                ticks: {
                                    precision: 0
                                },
                                beginAtZero: true
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Card Size',
                                    font: {
                                        size: 16,
                                        color: 'black'
                                    }
                                },
                            }
                        },

                        plugins: {
                            tooltips: {
                                enabled: true,
                                mode: 'index',
                                intersect: false
                            },

                            hover: {
                                mode: 'index',
                                intersect: false
                            },

                            legend: {
                                position: "top",
                                //align: 'end',

                                labels: {
                                    usePointStyle: true,
                                    pointStyle: 'circle',

                                    font: {
                                        size: 14
                                    }
                                },
                            },
                        },
                    },
                    plugins: [{
                        beforeInit: function (chart, args, options) {
                            var $preloaderWrapper = $('.ripple-pre-loader-wrapper');
                            $preloaderWrapper.css('display', 'flex');

                            // Get reference to the original fit function
                            const originalFit = chart.legend.fit;

                            // Override the fit function
                            chart.legend.fit = function fit() {
                                // Call original function and bind scope in order to use `this` correctly inside it
                                originalFit.bind(chart.legend)();
                                // Change the height as suggested in another answers
                                this.height += 5;
                            }
                        }
                    },
                    {
                        afterRender: function (chart, args, options) {
                            var $preloaderWrapper = $('.ripple-pre-loader-wrapper');
                            $preloaderWrapper.css('display', 'none');
                        }
                    },
                    ]
                };
            }

            return new InviteesChart();
        })();


        return new InviteesChart();
    })();

        var budgetChart = (function () {
            function BudgetChart() {}

            BudgetChart.prototype.initiliazeBudgetPieChart = function (canvasIdProperty) {

                return budgetVsExpenditureChart.BudgetPieChartInit(canvasIdProperty);
            }

            var budgetVsExpenditureChart = (function () {
                function BudgetPieChart() {
                    this.BudgetPieChartInit = function (canvasIdProperty) {
                        var $canvasElement = document.getElementById(canvasIdProperty).getContext('2d');

                        return new Chart($canvasElement, budgetVsExpenditureChartConfigurations());
                    }
                }

                var cardSizeLabels = (function getBudgetPieChartLabels() {
                    var labels = @Html.Raw(Json.Encode(@ViewBag.BudgetDetailsForExpenditureChart));
                    return labels.map(i => i.item);
                })();

                var cardSizeInviteesData = (function getBudgetPieChartDatas() {
                    var datas = @Html.Raw(Json.Encode(@ViewBag.BudgetDetailsForExpenditureChart));
                    return datas.map(i => i.budget_total);
                })();

                var expenditureLineChartDatas = (function getBudgetPieChartDatas() {
                    var datas = @Html.Raw(Json.Encode(@ViewBag.BudgetDetailsForExpenditureChart));
                    return datas.map(i => i.expenditure_total);
                })();

                function budgetVsExpenditureChartData() {

                    return {
                        labels: cardSizeLabels,
                        datasets: [
                            {
                                type: 'bar',
                                label: 'budget',
                                backgroundColor: 'rgba(0, 122, 204, 0.875)',
                                borderColor: 'blue',
                                barPercentage: 0.95,
                                categoryPercentage: 0.5,
                                maxBarThickness: 50,
                                data: cardSizeInviteesData,
                            },
                            {
                                type: 'bar',
                                label: 'Expenditure',
                                backgroundColor: 'rgba(255, 0, 0, 0.875)',
                                //borderColor: 'red',
                                data: expenditureLineChartDatas,
                                //pointBackgroundColor: 'red',
                                barPercentage: 0.95,
                                categoryPercentage: 0.5,
                                maxBarThickness: 50,
                            }
                        ],
                    };
                }

                function budgetVsExpenditureChartConfigurations() {

                    return {
                       // type: 'bar',
                        data: budgetVsExpenditureChartData(),

                        options: {
                            responsive: true,
                            maintainAspectRatio: false,

                            scales: {
                                y: {
                                    title: {
                                        display: true,
                                        text: 'Total Price (TZS)',
                                        font: {
                                            size: 16,
                                            color: 'black'
}
                                    },
                                    ticks: {
                                        precision: 0
                                    },
                                    beginAtZero: true
                                },
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Item Name',
                                        font: {
                                            size: 16,
                                            color: 'black'
                                        }
                                    },
                                }
                            },

                            plugins: {
                                tooltips: {
                                    enabled: true,
                                    mode: 'index',
                                    intersect: false
                                },

                                hover: {
                                    mode: 'index',
                                    intersect: false
                                },

                                legend: {
                                    position: "top",

                                    labels: {
                                        usePointStyle: true,
                                        pointStyle: 'circle',

                                        font: {
                                            size: 14
                                        }
                                    },
                                },
                            },
                        },
                        plugins: [{
                            beforeInit: function (chart, args, options) {
                                var $preloaderWrapper = $('.ripple-pre-loader-wrapper');
                                $preloaderWrapper.css('display', 'flex');

                                // Get reference to the original fit function
                                const originalFit = chart.legend.fit;

                                // Override the fit function
                                chart.legend.fit = function fit() {
                                    // Call original function and bind scope in order to use `this` correctly inside it
                                    originalFit.bind(chart.legend)();
                                    // Change the height as suggested in another answers
                                    this.height += 15;
                                }
                            }
                        },
                        {
                            afterRender: function (chart, args, options) {
                                var $preloaderWrapper = $('.ripple-pre-loader-wrapper');
                                $preloaderWrapper.css('display', 'none');
                            }
                        },
                        ]
                    };
                }

                return new BudgetPieChart();
            })();


            return new BudgetChart();
        })();

        $(document).ready(function () {
           dashboardConters.Init();

            inviteesChart.initiliazeInviteesChart('invitees-chart');

            budgetChart.initiliazeBudgetPieChart('budgeted-vs-expenditure-chart')
        });
    </script>

}