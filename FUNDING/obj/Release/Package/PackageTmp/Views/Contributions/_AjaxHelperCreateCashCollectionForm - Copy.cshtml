@model FUNDING.Models.CollectionModule.Contributions

@{
    AjaxOptions registerContributionsAjaxOptions = new AjaxOptions();
    registerContributionsAjaxOptions.HttpMethod = "POST";
    //registerContributionsAjaxOptions.UpdateTargetId = "divContributions";
    registerContributionsAjaxOptions.OnBegin = "OnBeginRequestCreate";
    registerContributionsAjaxOptions.OnSuccess = "OnSuccessRequestCreate";
    //registerContributionsAjaxOptions.OnComplete = "OnCompleteRequestCreate";
    registerContributionsAjaxOptions.OnFailure = "OnFailureRequestCreate";
    //registerContributionsAjaxOptions.Confirm = "Do you want to add user?";
}

@using (Ajax.BeginForm(actionName: "CreateCashCollections", controllerName: "Contributions", routeValues: null,
    ajaxOptions: registerContributionsAjaxOptions, htmlAttributes: new { id = "ajaxHelperCreateForm", @class= "position-relative", autocomplete = "off" }))
{
    @Html.AntiForgeryToken()
    @Html.TextBoxFor(model => model.Int_Mobile_number, new { @class="d-none"})

<div class="form-horizontal">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="row">
        <div class="form-group col-sm-6 col-lg-4 col-xl-3">
            @Html.LabelFor(model => model.Contribution_id, ViewData["ContributorNameLabel"] as string, htmlAttributes: new { @class = "mb-1" })
            <div class="col-12">
                @Html.EditorFor(model => model.Contribution_id, new { htmlAttributes = new { @class = "form-control flexdatalist", data_val_required = "Please enter contributor name." } })
                @Html.ValidationMessageFor(model => model.Contribution_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-sm-6 col-lg-4 col-xl-3">
            @Html.LabelFor(model => model.Contribution_amount, ViewData["CashCollectionLabel"] as string, htmlAttributes: new { @class = "mb-1" })
            <div class="col-12">
                @Html.EditorFor(model => model.Contribution_amount, new { htmlAttributes = new { @class = "form-control", data_val_regex = "Enter valid cash collection amout.", data_val_regex_pattern = "^[1-9]{1}(\\d{1,2})*(,\\d{3})*$", data_val_required = "Please enter cash collection amount." } })
                @Html.ValidationMessageFor(model => model.Contribution_amount, "", new { @class = "text-danger" })
            </div>
        </div>

        @{ Html.EnableClientValidation(false); }
        <div class="form-group col-sm-6 col-lg-4 col-xl-3 d-none">
            @Html.LabelFor(model => model.Mobile_number, htmlAttributes: new { @class = "mb-1" })
            <div class="col-12">
                @Html.EditorFor(model => model.Mobile_number, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Mobile_number, "", new { @class = "text-danger" })
                <span id="error-msg" class="d-none text-danger"></span>
            </div>
        </div>

        <div class="form-group col-sm-6 col-lg-4 col-xl-3 d-none">
            @Html.LabelFor(model => model.Email_address, htmlAttributes: new { @class = "mb-1" })
            <div class="col-12">
                @Html.EditorFor(model => model.Email_address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email_address, "", new { @class = "text-danger" })
            </div>
        </div>
        @{ Html.EnableClientValidation(true); }
    </div>

    <div class="text-end">
        <button id="submitCreateCustomers" type="submit" class="btn btn-outline-info btn-rounded">Save</button>
        <button id="closeCreateForm" type="reset" class="btn btn-outline-danger btn-rounded">Close</button>
    </div>

    <div class="position-absolute w-100 h-100 modal_pre-loader create-form_pre-loader">
        <div style="display: flex;" class='justify-content-center align-items-center h-100'>
            <div class='ripple-pre-loader'>
                <div></div>
                <div></div>
            </div>
        </div>
    </div>
</div>

    <hr />
}
