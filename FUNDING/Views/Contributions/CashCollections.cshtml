
@{
    ViewBag.Title = "Users";
    Layout = "~/Views/Shared/_Customers.cshtml";

    ViewData["Title"] = "Cash Collections";
    ViewData["Home"] = "Home";
    ViewData["Bct"] = "Receive Contribution";

    ViewData["ContributorNameLabel"] = "Contributor Name";
    ViewData["CashCollectionLabel"] = "Contributed Amount (TZS)";

    //Table header labels
    ViewData["Sno"] = "Sno";

    ViewData["Actions"] = "Actions";

}


<div class="row page-titles">
    <div class="col-md-5 align-self-center">
        <h4 class="text-themecolor">@ViewData["Title"]</h4>
    </div>
    <div class="col-md-7 align-self-center text-end">
        <div class="d-flex justify-content-end align-items-center">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="@Url.Action("Dashboard", "CustomerActivity")">@ViewData["Home"]</a>
                </li>
                <li class="breadcrumb-item active">@ViewData["Title"]</li>
            </ol>
        </div>
    </div>
</div>
<div class="card border-0">
    <div class="card-body">
        <div class="mb-1 text-end">
            <!-- Button trigger modal -->
            <button id="registerContributionsButton" type="button" class="btn btn-outline-primary btn-rounded">
                <i class="fas fa-plus"></i>
                @ViewData["Bct"]
            </button>
        </div>
        <hr />

        <div id="registerContributionsForm" style="display:none;">

            <h4 class="mb-2">Cash Collection Form</h4>

            @Html.Partial("_AjaxHelperCreateCashCollectionForm")
        </div>

        <div class="table-responsive with-loader">
            <table id="CustomerUsersTable" class="table table-bordered display" style="width: 100%;">
                <thead>
                    <tr>
                        <th class="th-sno pl-0 text-center">@ViewData["Sno"]</th>
                        <th>Full Name</th>
                        <th>Pledged Amount (TZS)</th>
                        <th>Contributed Amount (TZS)</th>
                        <th>Mobile Number</th>
                        <th>Remarks</th>
                        @*<th class="th-actions px-0">
                                <div class="th-actions-div">
                                    @ViewData["Actions"]
                                </div>
                            </th>*@
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        @*<th></th>*@
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
</div>

@section Styles {
    <link href="~/Scripts/intl-tel-input/css/intlTelInput.min.css" rel="stylesheet" />
    <link href="~/Scripts/intl-tel-input/css/isValidNumber.css" rel="stylesheet" />
    <link href="~/Scripts/jquery-flexdatalist-2.3.0/jquery.flexdatalist.min.css" rel="stylesheet" />
    <link href="~/Content/Site.css" rel="stylesheet" />

    <style>
        #ajaxHelperCreateForm .form-group input,
        #ajaxHelperCreateForm .form-group select,
        #ajaxHelperCreateForm .form-group textarea {
            max-width: 100%;
        }

        .create-form_pre-loader {
            top: 0;
        }

        h2.swal2-title {
            font-size: 1.5rem;
        }

        @@media (min-width: 1200px) and (max-width: 1399px) {
            @*.col-xl-2 {
                flex: 0 0 16.66667%;
                flex-shrink: 0;
                width: 16.66667%;
            }

            *@

            .col-xl-3_cs {
                flex: 0 0 25%;
                flex-shrink: 0;
                width: 25%;
            }
        }

        .iti.iti--allow-dropdown.iti--separate-dial-code {
            width: 100% !important;
        }

        #Contribution_id-flexdatalist-results>li{
            cursor: pointer;
        }

        .table tfoot th {
            border-bottom: solid #dee2e6 2px !important;
        }
    </style>
}

@section Scripts {
    <script src="~/Script/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/Script/jquery.validate.min.js"></script>
    <script src="~/Script/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Script/cleave.min.js"></script>
    <script src="~/Script/app.js"></script>
    <script src="~/Scripts/SweetAlert2/sweetalert2.all.min.js"></script>
    <script src="~/Scripts/intl-tel-input/js/intlTelInput-jquery.min.js"></script>
    <script src="~/Scripts/intl-tel-input/js/intlTelInput.js"></script>
    <script src="~/Scripts/jquery-flexdatalist-2.3.0/jquery.flexdatalist.min.js"></script>
    <script src="~/Scripts/numeral.min.js"></script>

    @if (@ViewBag.EventNameIsNullMessage == true)
    {
        <script>

            (function () {

                Swal.fire(
                    'Be Alerted!',
                    'The <strong>Event Name</strong> is not set. Kindly, notify the system Administrator.',
                    'warning'
                )
            })();

        </script>
    }

    <script>
        var CustomerUsersDatatable, $clickedDeleteButton;
        var $ajaxHelperCreateForm = $('#ajaxHelperCreateForm');
        var $ajaxHelperUpdateForm = $('#ajaxHelperUpdateForm');
        var $ajaxHelperDeleteForm = $('#ajaxHelperDeleteForm');
        var $CustomerUsersTable = $('#CustomerUsersTable');
        var $ajaxHelperCreateModal = $('#ajaxHelperCreateModal');
        var $ajaxHelperUpdateModal = $('#ajaxHelperUpdateModal');
        var $modalPreLoader = $('#modal_pre-loader');

        @{ #region Initilize Flexdatalist}

        $(document).ready(function () {
            $('.flexdatalist').flexdatalist({
                minLength: 1,
                textProperty: '{contributor_name}',
                requestType: 'post',
                searchContain: true,
                valueProperty: 'contribution_id',
                selectionRequired: true,
                visibleProperties: ["contributor_name", "mobile_number"],
                searchIn: 'contributor_name',
                data: '@Url.Action("FlexDataCashCollection")'
            });

            $('#Contribution_id-flexdatalist').on('change', function () {
                $contribution_Flexdatalist = $(this);

                if (typeof parseInt($contribution_Flexdatalist.val()) == 'number') {
                    $validationSpan = $('#Contribution_id-error');
                    $validationSpan.text("");
                }
            });

        });

        @{#endregion }

        function toggleRegisterContributionsForm() {
            var $registerContributionsButton = $('#registerContributionsButton');
            var $registerContributionsForm = $('#registerContributionsForm');

            var $closeCreateForm = $('#closeCreateForm');

            $registerContributionsButton.on('click', function (e) {
                e.preventDefault();
                $registerContributionsForm.slideToggle();
            });

            $closeCreateForm.on('click', function (e) {
                e.preventDefault();
                $registerContributionsForm.slideUp();

                resetFormFields($registerContributionsForm);
            })
        }

        function establishThousandsCommaSeparator($input) {
            new Cleave($input, {
                numeral: true,
                numeralThousandsGroupStyle: 'thousand'
            });
        }

        $(document).ready(function () {

            toggleRegisterContributionsForm();

            establishThousandsCommaSeparator(
                $ajaxHelperCreateForm.find('#Contribution_amount')
            );
            //establishThousandsCommaSeparator(
            //    $ajaxHelperUpdateForm.find('#Contribution_amount')
            //);

            submitCreateForm();
            submitUpdateForm();

            CustomerUsersDatatable = $CustomerUsersTable.DataTable({
                processing: true,
                deferRender: true,
                stateSave: 15,
                language: {
                    processing:
                        "<div class='d-flex justify-content-center align-items-center h-100'>"+
                        "\t<div class='ripple-pre-loader'>" +
                        "\t\t<div></div>" +
                        "\t\t<div></div>" +
                        "\t</div>"+
                        "</div>"
                },

                ajax: {
                    url: "@Url.Action("CashCollectionDataTable")",
                    type: "POST",
                    dataType: "json",
                },

                // Table serial number
                fnRowCallback: function (nRow, aData, iDisplayIndex) {
                    var oSettings = this.fnSettings();
                    $("td:first", nRow).html(oSettings._iDisplayStart + iDisplayIndex + 1);
                    return nRow;
                },

                columns: [
                    {
                        title: "Sno",
                        data: 'id',
                    },
                    { data: 'contributor_name', title: 'Full Name' },
                    {
                        data: 'pledged_amount', title: "Pledged Amount (TZS)",
                        render: function (data, type, row) {
                            return '<div class="text-end">'+data+'</div>';
                        }
                    },

                    {
                        data: 'contribution_amount', title: "Contributed Amount (TZS)",
                        render: function (data, type, row) {
                            return '<div class="text-end">'+data+'</div>';
                        }
                    },
                    {
                        data: 'mobile_number', title: "Mobile Number",
                        render: function (data, type, row) {
                            return '<div class="text-nowrap">' + data + '</div>';
                        }
                    },
                    { data: 'remarks', title: "Remarks"},
                    //{ data: 'control_number', title: "Control Number"},
                    //{ data: 'contribution_due_date', title: "Contribution Due Date"},

                    @*
                    {
                        orderable: false,
                        data: null,
                        render: function (data, type, row) {

                            var id = row.contribution_id;

                            return "<div class='position-relative'>" +
                                "<div class='table-buttons justify-content-around'> " +
                                "\t<button class='btn btn-outline-info btn-sm' data-id=" + id + " data-btn-type='edit'>" +
                                "\t\t<i class='fas fa-pencil-alt'></i>" +
                                "\t</button>" +
                                //"\t<button class='btn btn-outline-danger btn-sm' data-id=" + id + " data-btn-type='delete'>" +
                                //"\t\t<i class='fas fa-trash'></i>" +
                                //"\t</button>" +
                                "</div>" +
                                "<div class='justify-content-center h-100 w-100 table-preloader'>" +
                                "\t<div class='loading-swapping-wrapper'>" +
                                "\t\t<div class='loading-swapping'>" +
                                "\t\t\t<div></div>" +
                                "\t\t\t<div></div>" +
                                "\t\t\t<div></div>" +
                                "\t\t</div>" +
                                "\t</div>" +
                                "</div>" +
                                "</div>";
                        }
                    }
                        *@
                ],

                "footerCallback": function (row, data, start, end, display) {
                    var api = this.api();

                    // Remove the formatting to get integer data for summation
                    var intVal = function (i) {
                        return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : 0;
                    };

                    // Total over all pages
                    total = api
                        .column(3)
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    // Total over this page
                    pageTotal = api
                        .column(3, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    // Update footer
                    $(api.column(3).footer()).html(
                        '<span class="d-block text-end text-nowrap">Total: ' + numeral(total).format('0,0') + '</span>');
                }
            });

            //On opening create modal clear the form fields
            resetFormFieldsOnModalClose($ajaxHelperCreateModal, $ajaxHelperCreateForm);

            validateWhetherMobileNumberExists($ajaxHelperCreateForm);
            //validateWhetherMobileNumberExists($ajaxHelperUpdateForm);
        });

       @{ #region Operations On Datatable Buttons }

        function OperationOnDatatableBtns(iti) {

            //click an update button
            $CustomerUsersTable.on('click', 'button[data-btn-type=edit]', function (e) {
                e.preventDefault();

                $clickedUpdateButton = $(this);

                updateRecordOperation($clickedUpdateButton, iti);
            });

            //click an delete button
            $CustomerUsersTable.on('click', 'button[data-btn-type=delete]', function (e) {
                e.preventDefault();

                $clickedDeleteButton = $(this);

                deleteRowRecord($clickedDeleteButton);

            });

        }

        function updateRecordOperation($this, iti) {
            //var url = '@Url.Action("UpdateRegisterPledges", "Contributions")';
            var data_id = $this.attr('data-id');
            var tr = $this.parentsUntil('tbody').get(3);

            populateUpdateModalFormElements($(tr), data_id, iti);

            //change form action attribute
            //$ajaxHelperUpdateForm.attr('action', url);

            $ajaxHelperUpdateModal.modal('show');
        }

        function populateUpdateModalFormElements($table_row, data_id, iti) {
            var Contributor_name = $table_row.find('td').eq(1).text().trim();
            var Contribution_amount = $table_row.find('td').eq(2).text().trim();
            var Mobile_number = $table_row.find('td').eq(3).text().trim();
            var Email_address = $table_row.find('td').eq(4).text().trim();

            $ajaxHelperUpdateForm.find('#Contribution_id').val(data_id);
            $ajaxHelperUpdateForm.find('#Contributor_name').val(Contributor_name);
            $ajaxHelperUpdateForm.find('#Contribution_amount').val(Contribution_amount);
            //iti.setNumber('+' + Mobile_number);
            //$ajaxHelperUpdateForm.find('#Mobile_number').val('+' + Mobile_number);
            $ajaxHelperUpdateForm.find('#Int_Mobile_number').val('+' + Mobile_number);
            $ajaxHelperUpdateForm.find('#Mobile_number_clone').val('+' + Mobile_number);
            $ajaxHelperUpdateForm.find('#Email_address').val(Email_address);

        }

        function getSelectValueForDropdownList(optionItemText) {
            var $optinItemList = $ajaxHelperUpdateForm.find('#user_type option');
            var optionItemValue = '';

            $.map($optinItemList, function (value, index) {
                if ($(value).text().trim() === optionItemText) {
                    optionItemValue = $(value).val();
                }
            });
            return optionItemValue;
        }

        @{#endregion}

        @{ #region Create--Record Section }

        function submitCreateForm() {
            $ajaxHelperCreateForm.find('#submitCreateCustomers').on('click', function (e) {
                e.preventDefault();

                if ($($ajaxHelperCreateForm).valid() && !isInternationalMobileNumberValid($ajaxHelperCreateForm)) {
                    Swal.fire({
                        //title: 'Are you sure?',
                        text: "Do you want to add contributor details?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $ajaxHelperCreateForm.submit();
                        }
                    });
                }
            });

            $ajaxHelperCreateForm.on('submit','#submitCreateCustomers',  function (e) {
                e.preventDefault();
                if ($($ajaxHelperCreateForm).valid() && !isInternationalMobileNumberValid($ajaxHelperCreateForm)) {
                    Swal.fire({
                        //title: 'Are you sure?',
                        text: "Do you want to add contributor details?",
                        icon: 'info',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $ajaxHelperCreateForm.submit();
                        }
                    });
                }
            });
        }

        function OnBeginRequestCreate() {

            //Display preloader on modal open
            $('#registerContributionsForm').find('.modal_pre-loader').show();
        }

    function OnSuccessRequestCreate(data) {

        if (data.loginStatus == false) {
                window.location.replace('@Url.Action("CustomerLogin", "Login")');
            }

            //Hide modal pre-loader after closing the modal
            getModalPreLoader($ajaxHelperCreateModal).hide();

            CustomerUsersDatatable.ajax.reload();

            $ajaxHelperCreateModal.modal('hide');

            if (data.createStatus) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: 'success',
                    title: data.response
                })
            } else {
                if (data.emptyEventNameStatus) {
                    Swal.fire(
                        'Record Not Saved!',
                        'The <strong>Event Name</strong> is not set. Kindly, notify the system Administrator.',
                        'error'
                    )
                }
            }

            $('#registerContributionsForm').find('.modal_pre-loader').hide();
            //Reset form fields
            resetFormFields($ajaxHelperCreateForm);

        }

        function OnFailureRequestCreate() {

            //Hide modal pre-loader after closing the modal
            getModalPreLoader($ajaxHelperCreateModal).hide();

            $ajaxHelperCreateModal.modal('hide');

            //Reset form fields
            resetFormFieldsOnModalClose($ajaxHelperCreateModal, $ajaxHelperCreateForm);
        }

        @{ #endregion}

        @{ #region Update--Record Section }

        function submitUpdateForm() {
            $ajaxHelperUpdateForm.find('#submitupdateContributions').on('click', function (e) {
                e.preventDefault();

                if ($ajaxHelperUpdateForm.valid() && !isInternationalMobileNumberValid($ajaxHelperUpdateForm)) {
                    Swal.fire({
                        //title: 'Are you sure?',
                        text: "Do you want to update contributor details?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $ajaxHelperUpdateForm.submit();
                        }
                    });
                }
            });

            $ajaxHelperUpdateForm.on('submit', '#submitupdateContributions', function (e) {
                e.preventDefault();
                if ($(this).valid()) {
                    Swal.fire({
                        //title: 'Are you sure?',
                        text: "Do you want to update contributor details?",
                        icon: 'info',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $ajaxHelperUpdateForm.submit();
                        }
                    });
                }
            });
        }

        function OnBeginRequestUpdate() {
            //Display preloader on modal open
            getModalPreLoader($ajaxHelperUpdateModal).show();
        }

    function OnSuccessRequestUpdate(data) {

        if (data.loginStatus == false) {
                window.location.replace('@Url.Action("CustomerLogin", "Login")');
        }

            $ajaxHelperUpdateModal.modal('hide');

            //Reset form fields
            resetFormFieldsOnModalClose($ajaxHelperUpdateModal, $ajaxHelperUpdateForm);

            //Hide modal pre-loader after closing the modal
            getModalPreLoader($ajaxHelperUpdateModal).hide();

            if (data.updateStatus) {

                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: 'success',
                    title: data.response
                })

            } else {
                if (data.emptyEventNameStatus) {
                    Swal.fire(
                        'Record Not Saved!',
                        'The <strong>Event Name</strong> is not set. Kindly, notify the system Administrator.',
                        'error'
                    )
                } else {
                    Swal.fire(
                        '',
                        data.response,
                        'error'
                    )
                }
            }

            //refresh the datatable after updating data
            CustomerUsersDatatable.ajax.reload();
        }

        function OnFailureRequestUpdate() {
            $ajaxHelperUpdateModal.modal('hide');

            //Reset form fields
            resetFormFieldsOnModalClose($ajaxHelperUpdateModal, $ajaxHelperUpdateForm);

            //Hide modal pre-loader after closing the modal
            getModalPreLoader($ajaxHelperUpdateModal).hide();
        }

        @{ #endregion}

        @{ #region Delete--Record Section }

        function deleteRowRecord($this) {
            var url = $this.attr('data-url');
            var data_id = $this.attr('data-id');

            //change form action attribute
            $ajaxHelperDeleteForm.attr('action', url);

            $ajaxHelperDeleteForm.find('#contribution_id').val(data_id);

            $('#deleteBtn').click();
        }


        function OnBeginRequestDelete() {
            //Display preloader upon confirm delete
            $clickedDeleteButton.parent().hide().next().css('display', 'flex');
        }

    function OnSuccessRequestDelete(data) {

        if (data.loginStatus == false) {
                window.location.replace('@Url.Action("CustomerLogin", "Login")');
        }

            //Hide preloader on success
            $clickedDeleteButton.parent().css('display', 'flex').next().hide();

            //Reset form fields
            resetFormFields($ajaxHelperDeleteForm);

            if (data.deleteStatus) {
                alert(data.response);
            } else {
                alert(data.response);
            }

            //refresh the datatable after updating data
            CustomerUsersDatatable.ajax.reload();
        }

        function OnFailureRequestDelete() {
            //Hide preloader on failure
            $clickedDeleteButton.parent().css('display', 'flex').next().hide();

            //Reset form fields
            resetFormFields($ajaxHelperDeleteForm);

        }

        @{ #endregion}

        /**
         * *This function clears form field of a specific
         *
         * @@param form specific form Element
         */
        function resetFormFields(form) {
            form.find('#Contribution_id-flexdatalist').val('');
            form.find('#Contributor_id').val('');
            form.find('#Contribution_amount').val('');
            form.find('#Remarks').val('');
        }

        function resetFormFieldsOnModalClose(modal, form) {
            modal.on('hidden.bs.modal', function () {
                resetFormFields(form);
                validateFormElementsOnModalClose(form);
            });
        }

        function getModalPreLoader(modal) {
            return modal.find('.modal_pre-loader');
        }

        function validateFormElementsOnModalClose(form) {
            var $field = form.find('.input-validation-error');
            var $spanErrorWrapper = form.find('.field-validation-error')

            //Validate the field
            $field.removeClass('input-validation-error').addClass('valid');
            $field.attr('aria-invalid', 'false');

            //Validate the span error wrapper and remove the span error message
            $spanErrorWrapper.removeClass('field-validation-error').addClass('field-validation-valid');
            $spanErrorWrapper.empty();
        }

        function isInternationalMobileNumberValid($form) {
            return $form.find('#Mobile_number').hasClass('invalid-mobile-number');
        }

        function validateWhetherMobileNumberExists($form){
            var $mobileNumberField = $form.find('#Mobile_number');

            $mobileNumberField.on('blur', function (e) {
                if (!isInternationalMobileNumberValid($form)) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("IsMobileNumberAvailable", "Contributions")',
                        data: populateDataToValidateWhetherMobileNumberExists($form),
                        success: function (data) {

                            if (!data) {
                                Swal.fire(
                                    'Mobile Number already in use',
                                    'The mobile number <strong>' + $form.find('#Int_Mobile_number').val().trim() + '</strong> is currently used by another contributor.',
                                    'info'
                                );
                            }
                        }
                    });
                }
            });
        }

        function populateDataToValidateWhetherMobileNumberExists($form) {
            var mobile_number = $form.find('#Mobile_number').val();
            var verificationToken = $form.find('input[name=__RequestVerificationToken]').val();
            var int_mobile_number_cloned = $form.find('#Mobile_number_clone').val();

            //var countryCodeIdValue = $form.find('.iti__selected-dial-code').text().trim();
            //var int_mobile_number_value = countryCodeIdValue + mobile_number;

            $form.find('#Int_Mobile_number').val(int_mobile_number_value);

            var int_mobile_number_cloned_value = int_mobile_number_cloned != null ? int_mobile_number_cloned : "";

            return {
                //"Mobile_number": mobile_number,
                "__RequestVerificationToken": verificationToken,
                "Int_Mobile_number": int_mobile_number_value,
                "Mobile_number_clone": int_mobile_number_cloned_value
            };
        }

    </script>
}
