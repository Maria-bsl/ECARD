@model FUNDING.Models.Participate
@{
    ViewBag.Title = "Participants";
    Layout = "~/Views/Shared/_Support.cshtml";

    ViewData["Title"] = "Participants";
    ViewData["Home"] = "Home";
    ViewData["Bct"] = "Register";

    //Table header labels
    ViewData["Sno"] = "Sno";

    ViewData["Actions"] = "Actions"; }


@section Styles {
    <link href="~/Scripts/intl-tel-input/css/isValidNumber.css" rel="stylesheet" />
    <link href="~/Scripts/intl-tel-input/css/intlTelInput.min.css" rel="stylesheet" />
    <link href="~/Content/Site.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/assets/datepicker/gijgo.min.css">
    <link rel="stylesheet" href="~/assets/dataTable/css/dataTables.bootstrap4.min.css">
  @*  <link href="~/select2/css/select2.min.css" rel="stylesheet" />*@

    <style>
       @* .select2.select2-container.select2-container--default,
        .iti.iti--allow-dropdown.iti--separate-dial-code {
            width: 100%;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow,
        .select2-container .select2-selection--single {
            height: 38px !important;
        }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 38px;
        }*@


        .datepicker td, .datepicker th {
            padding: 3px !important;
        }

        .form-control {
            min-height: auto;
        }

        input[type=file] {
            max-width: 100%;
        }

        @@media (max-width: 450px) {
            #visitiorContentHeader {
                display: flex;
                flex-direction: column;
            }

            #visitorSummaryBox {
                margin-top: 0.75rem;
                display: flex;
                justify-content: space-between;
                width: 100%;
                order: 2;
            }
        }
    </style>
}


<div class="row page-titles">
    <div class="col-md-5 align-self-center">
        <h4 class="text-themecolor">@ViewData["Title"]</h4>
    </div>
    <div class="col-md-7 align-self-center text-end">
        <div class="d-flex justify-content-end align-items-center">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="#">@ViewData["Home"]</a></li>
                <li class="breadcrumb-item active">@ViewData["Title"]</li>
            </ol>
        </div>
    </div>
</div>
<div class="card border-0">
    <div class="card-body px-3">
        <div id="visitiorContentHeader" class="mb-1 justify-content-between align-items-center" style="display: flex;">
            <div id="visitorSummaryBox" class="position-relative p-2 ">
                @*<span class="h6 m-0 border border-success rounded">Total Invitees: </span>
                    <span style="font-size: 0.75rem; font-weight: 600;" class="badge rounded-pill bg-info" id="VisitorsCount"></span>*@
            </div>
            <div class="btn-group align-self-end">
                <!-- Button trigger modal -->
                @* <button type="button" class="btn btn-outline-success btn-rounded" data-bs-toggle="modal" data-bs-target="#ajaxHelperBulkUploadModal">
                        <i class="fas fa-upload"></i>
                        @ViewData["Bulk_Upload"]
                    </button>*@
                <button type="button" class="btn btn-outline-primary btn-rounded" data-bs-toggle="modal" data-bs-target="#ajaxHelperCreateModal">
                    <i class="fas fa-plus"></i>
                    @ViewData["Bct"]
                </button>

                <button type="button" class="btn btn-outline-secondary btn-rounded" id="btnPdf">
                    <i class="fas fa-paper-plane"></i>
                    Pdf
                </button>

                <button type="button" class="btn btn-sm btn-outline-warning btn-rounded" id="btnExcel">
                    <i class="fas fa-upload"></i>
                    Excel
                </button>
            </div>
        </div>
        <hr />

        @Html.Partial("_AjaxHelperCreateForm")

        @Html.Partial("_AjaxHelperUpdateForm")

        @Html.Partial("_AjaxHelperDeleteForm")


        <div class="table table-responsive with-loader">
            <table id="ParticipantTable" class="table table-responsive table-bordered display" style="width: 100%;">
                <thead>
                    <tr>
                         <th class="th-sno pl-1 text-center">@ViewData["Sno"]</th>
                        <th>Name</th>
                        <th>Mobile no</th>
                        <th>Gender</th>
                        <th>Birth Date</th>
                        <th>Region</th>
                        <th>District</th>
                        <th>Entrepreneurship</th>
                        <th>Opportunity</th>
                        <th>Business Sector</th>
                        <th>IP Address</th>
                        <th>Created At</th>
                        <th  id="last" class="th-actions px-0">
                            <div  class="th-actions-div">
                                @ViewData["Actions"]
                            </div>
                        </th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>



@section Scripts {
    <script src="~/Script/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/Script/jquery.validate.min.js"></script>
    <script src="~/Script/moment.min.js"></script>
    <script src="~/Script/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Scripts/SweetAlert2/sweetalert2.all.min.js"></script>
    <script src="~/Scripts/numeral.min.js"></script>
    <script src="~/Scripts/chart.min.js"></script>
    <script src="~/assets/datepicker/gijgo.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="~/assets/dataTable/js/dataTables.bootstrap4.min.js"></script>
    @*<script src="~/assets/dataTable/js/dataTables.js"></script>*@
    <script src="~/Scripts/intl-tel-input/js/intlTelInput-jquery.min.js"></script>
    <script src="~/Scripts/intl-tel-input/js/intlTelInput.js"></script>
    <script src="~/Script/additional-methods.min.js"></script>
    <script src="~/Script/app.js"></script>
   @* <script src="~/select2/js/select2.min.js"></script>*@


<script>
        var ParticipantDatatable, $clickedDeleteButton, dataUrl, dataid;

        var $ajaxHelperCreateForm = $('#ajaxHelperCreateForm');
        var $ajaxHelperUpdateForm = $('#ajaxHelperUpdateForm');
        var $ajaxHelperDeleteForm = $('#ajaxHelperDeleteForm');
        var $ParticipantTable = $('#ParticipantTable');
        var $ajaxHelperCreateModal = $('#ajaxHelperCreateModal');
        var $ajaxHelperUpdateModal = $('#ajaxHelperUpdateModal');
        var $modalPreLoader = $('#modal_pre-loader');

        var intl_tel_input = (function () {

            function Intl_Tel_Input() {
                this.createFormElement = $('#ajaxHelperCreateForm');
                this.updateFormElement = $('#ajaxHelperUpdateForm');
            }

            Intl_Tel_Input.prototype.InitilizeUpdateForm = function () {

                var $form = this.updateFormElement.get(0);

                var $mobileNumber = $form.querySelector("#phone_number");

                initilize_intlTelInput($mobileNumber);

                ValidateInternationMobileNumber($form, $mobileNumber);

            }

            Intl_Tel_Input.prototype.InitilizeOnCreateForm = function () {

                var $form = this.createFormElement;
                var $mobileNumber = document.querySelector("#phone_number");

                initilize_intlTelInput($mobileNumber);

                ValidateInternationMobileNumber($form.get(0), $mobileNumber);

                var $modal = this.createFormElement.find('.modal');
                var iti = window.intlTelInputGlobals.getInstance($mobileNumber);

                $modal.on('show.bs.modal', function () {
                    iti.setCountry("tz");
                    $form.find("#intl-input-error").addClass('d-none');
                });
            }

            // here, the index maps to the error code returned from getValidationError - see readme
            function getErrorMapArray() {
                var errorMap = [
                    "Please enter a valid mobile operator code",
                    "Invalid country code",
                    "The mobile number is too short",
                    "The mobile number is too long",
                    "Please enter a valid mobile number"];

                return errorMap;
            }

            function initilize_intlTelInput($mobileNumber) {

                 window.intlTelInput($mobileNumber, {
                    // allowDropdown: false,
                    // autoHideDialCode: false,
                    // autoPlaceholder: "off",
                    dropdownContainer: document.body,
                    // excludeCountries: ["us"],
                    formatOnDisplay: false,
                    // geoIpLookup: function(callback) {
                    //   $.get("http://ipinfo.io", function() {}, "jsonp").always(function(resp) {
                    //     var countryCode = (resp && resp.country) ? resp.country : "";
                    //     callback(countryCode);
                    //   });
                    // },
                    //hiddenInput: "full_number",
                    //initialCountry: "auto",
                    // localizedCountries: { 'de': 'Deutschland' },
                    //nationalMode: false,
                    // onlyCountries: ['us', 'gb', 'ch', 'ca', 'do'],
                    //placeholderNumberType: "MOBILE",
                    preferredCountries: ['tz'],
                    separateDialCode: true,
                    utilsScript: "@Url.Content("~/Scripts/intl-tel-input/js/utils.js")",
                 });
            }

            function ValidateInternationMobileNumber($form, $input) {
                var iti = window.intlTelInputGlobals.getInstance($input);

                $input.addEventListener('keyup', reset($form));
                $input.addEventListener('change', reset($form));

                $input.addEventListener('blur', function () {
                    reset($form);

                    $input.classList.remove("invalid-mobile-number");

                    var mobileNumberValue = $input.value.trim();
                    var isOnlyDigits = new RegExp(/^\d+$/);

                    var $intl_tel_errorMsg = $form.querySelector("#intl-input-error");

                    if (mobileNumberValue) {
                        if (isOnlyDigits.test(mobileNumberValue)) {
                            if (!iti.isValidNumber()) {
                                var errorCode = iti.getValidationError();
                                var errorMap = getErrorMapArray();

                                if (errorCode >= 0 && errorCode < errorMap.length) {
                                    $intl_tel_errorMsg.innerHTML = errorMap[errorCode];
                                    $intl_tel_errorMsg.classList.remove("d-none");
                                    $intl_tel_errorMsg.classList.add("d-block");
                                    $input.classList.add("invalid-mobile-number");
                                }

                            } else {
                                $input.classList.remove("invalid-mobile-number");
                                var $intl_tel_mobileNumber = $form.querySelector("#Int_Mobile_number");
                                $intl_tel_mobileNumber.value = iti.getNumber();
                            }

                        } else {
                            $input.classList.add("invalid-mobile-number");
                            $intl_tel_errorMsg.classList.remove("d-none");
                            $intl_tel_errorMsg.classList.add("d-block");
                            $intl_tel_errorMsg.innerHTML = "Please enter a valid mobile number";
                        }
                    }
                });

            }

            function reset($form){
                var $intl_tel_errorMsg = $form.querySelector("#intl-input-error");

                $intl_tel_errorMsg.innerHTML = "";
                $intl_tel_errorMsg.classList.remove("d-block");
                $intl_tel_errorMsg.classList.add("d-none");
            };


            return new Intl_Tel_Input();
        })();

        $(document).ready(function () {
          @*  $('#opportunity').select2();
            $('#entrepreneur_status').select2();
            $('#business_sector').select2();*@


            $('#dob').change(function () {
                var dob = new Date($(this).val());
                var minAge = 15;
                var minDate = new Date();
                minDate.setFullYear(minDate.getFullYear() - minAge);

                if (dob > minDate) {
                    alert('Age must be at least ' + minAge + ' years old.');
                    $(this).val(''); // Clear the input field
                }
            });

           @* return $.parseJSON(data, true)
            var logdate = data[d].Login_Time;
            var date = new Date(parseInt(logdate.substr(6)));

            var formatted = ("0" + date.getDate()).slice(-2) + "-" +
                ("0" + (date.getMonth() + 1)).slice(-2) + "-" +
                date.getFullYear() + " " + date.getHours() + ":" +
                date.getMinutes();
               *@

            ParticipantDatatable = $ParticipantTable.DataTable({

                processing: true,
                deferRender: true,
                stateSave: 5*60,
                language: {
                    processing:
                        "<div class='d-flex justify-content-center align-items-center h-100'>"+
                        "\t<div class='ripple-pre-loader'>" +
                        "\t\t<div></div>" +
                        "\t\t<div></div>" +
                        "\t</div>"+
                        "</div>"
               },

                ajax: {
                    url: "@Url.Action("IndexDataTable", "Participants")",
                    type: "POST",
                    dataType: "json",

                },

                columns: [
                    { title: 'Sno',data: 'pat_sno' },
                    { data: 'fullname', title:'Name'},
                    { data: 'phone_number', title:'Mobile Number'},
                    { data: 'gender', title: 'Gender' },
                    { data: 'dob', title: 'Birth Date' },
                    { data: 'region', title: 'Region' },
                    { data: 'district', title: 'District' },
                    { data: 'entrepreneur_status', title: 'Entrepreneurship' },
                    { data: 'opportunity', title: 'Opportunity' },
                    { data: 'business_sector', title: 'Business Sector' },
                    { data: 'ip_address', title: 'IP Address'},
                    {
                        data: 'posted_date', title: 'Created At',
                        render: function (data) {
                            // Convert Unix timestamp to JavaScript Date object
                             var date = new Date(parseInt(data.substr(6)));

                            // Format the date as desired (e.g., using toLocaleString)
                             return date.toLocaleString(); // Or any other date format
                            //  return new Date(parseInt(data.substr(6)));
                        }
                     },
                    {
                        orderable: false,
                        data: null,
                         render: function (data, type, row) {
                            var update_url = '/Participants/AjaxHelperUpdateForm/'+ row.pat_sno;
                             var delete_url = '/Participants/AjaxHelperDeleteForm/' + row.pat_sno;

                             return "<div class='position-relative'>" +
                                "<div class='table-buttons justify-content-around'> " +
                                 "\t<button class='btn btn-outline-info btn-sm' data-id=" + row.pat_sno + " data-btn-type='edit' data-url=" + update_url + ">" +
                                "\t\t<i class='fas fa-pencil-alt'></i>" +
                                "\t</button>" +
                                 "\t<button class='btn btn-outline-danger btn-sm' data-id=" + row.pat_sno + " data-btn-type='delete' data-url=" + delete_url + ">" +
                                "\t\t<i class='fas fa-trash'></i>" +
                                 "\t</button>" +

                                "</div>" +
                                "<div class='justify-content-center h-100 w-100 table-preloader'>"+
                                "\t<div class='loading-swapping-wrapper'>"+
                                "\t\t<div class='loading-swapping'>"+
                                "\t\t\t<div></div>"+
                                "\t\t\t<div></div>"+
                                "\t\t\t<div></div>"+
                                "\t\t</div>"+
                                "\t</div>"+
                                "</div>"+
                                 "</div>";
                        }
                    }
                ]

           })

            $("#btnPdf").click(function () {
                addpdf();
            })
            $("#btnExcel").click(function () {
                addExcel();
            })

            districtDropdownListHandler();
            wardDropdownListHandler();

            intl_tel_input.InitilizeOnCreateForm();
            intl_tel_input.InitilizeUpdateForm();

            //On opening create modal clear the form fields
            resetFormFieldsOnModalClose($ajaxHelperCreateModal, $ajaxHelperCreateForm);

            OperationOnDatatableBtns();

            //UpdateVisitorCount();

            validateWhetherMobileNumberExists($ajaxHelperCreateForm);
            validateWhetherMobileNumberExists($ajaxHelperUpdateForm);

            submitCreateForm();
            submitUpdateForm();
           // SmsAllRowRecord()

            $('#dob').datepicker({
                format: 'dd/mm/yyyy',
                //format: 'dddd, dd mmmm yyyy',
                //calendarWeeks: true,
                uiLibrary: 'bootstrap4',
                iconsLibrary: 'fontawesome',
                modal: true,
                header: true,
                footer: true,
            });

        });

        function addExcel() {

              $.ajax({
                url: "@Url.Action("IndexDataTable", "Participants")",
                type: "POST",
                dataType: "json",
                async: false,
                  success: function (data) {

                     jQuery("#ParticipantTable tbody").empty();
                      jQuery("#ParticipantTable tfoot").empty();
                      if (jQuery.fn.DataTable.isDataTable("#ParticipantTable")) {
                          jQuery('#ParticipantTable').DataTable().clear().destroy();
                      }

                      if (data != null) {
                          var i = 1;
                          var len = data.data.length;

                          //console.log(len);

                          for (var d = 0; d < len; d++) {
                              var logdate = data.data[d].posted_date;
                              var date = new Date(parseInt(logdate.substr(6)));
                              var formatted = ("0" + date.getDate()).slice(-2) + "-" +
                                  ("0" + (date.getMonth() + 1)).slice(-2) + "-" +
                                  date.getFullYear() + " " + date.getHours() + ":" +
                                  date.getMinutes();


                          var row = '<tr>' +
                              // '<td>' + i + '</td>' +
                              '<td>' + data.data[d].pat_sno + '</td>' +
                              '<td>' + data.data[d].fullname  + '</td>' +
                              '<td>' + data.data[d].phone_number + '</td>' +
                              '<td>' + data.data[d].gender + '</td>' +
                              '<td>' + data.data[d].dob + '</td>' +
                              '<td>' + data.data[d].region + '</td>' +
                              '<td>' + data.data[d].district + '</td>' +
                              '<td>' + data.data[d].entrepreneur_status+ '</td>' +
                              '<td>' + data.data[d].opportunity + '</td>' +
                              '<td>' + data.data[d].business_sector + '</td>' +
                              '<td>' + data.data[d].ip_address + '</td>' +
                              '<td>' + formatted + '</td>' +
                              '</tr>';
                          jQuery("#ParticipantTable tbody").append(row);
                          i++;
                          }
                          var last = document.getElementById("last");
                          last.classList.add("d-none");

                      $('#ParticipantTable').table2excel({

                          filename: "participants.xls",
                      });
                     @**@ jQuery("#ParticipantTable").DataTable().clear().destroy();
                           jQuery("#ParticipantTable tfoot").empty();
                      }
                },
            });
        }

        function addpdf() {
           @**@ $.ajax({
                url: "@Url.Action("IndexDataTable", "Participants")",
                type: "POST",
               dataType: "json",
                async: false,
                success: function (data) {

                   @**@jQuery("#ParticipantTable tbody").empty();
                    jQuery("#ParticipantTable tfoot").empty();
                    if (jQuery.fn.DataTable.isDataTable("#ParticipantTable")) {
                        jQuery('#ParticipantTable').DataTable().clear().destroy();
                    }

                    if (data != null) {
                        var i = 1;
                        var len = data.data.length;

                        //console.log(len);

                        for (var d = 0; d < len; d++) {
                            var logdate = data.data[d].posted_date;
                            var date = new Date(parseInt(logdate.substr(6)));
                            var formatted = ("0" + date.getDate()).slice(-2) + "-" +
                                ("0" + (date.getMonth() + 1)).slice(-2) + "-" +
                                date.getFullYear() + " " + date.getHours() + ":" +
                                date.getMinutes();


                            var row = '<tr>' +
                                // '<td>' + i + '</td>' +
                                '<td>' + data.data[d].pat_sno + '</td>' +
                                '<td>' + data.data[d].fullname + '</td>' +
                                '<td>' + data.data[d].phone_number + '</td>' +
                                '<td>' + data.data[d].gender + '</td>' +
                                '<td>' + data.data[d].dob + '</td>' +
                                '<td>' + data.data[d].region + '</td>' +
                                '<td>' + data.data[d].district + '</td>' +
                                '<td>' + data.data[d].entrepreneur_status + '</td>' +
                                '<td>' + data.data[d].opportunity + '</td>' +
                                '<td>' + data.data[d].business_sector + '</td>' +
                                '<td>' + data.data[d].ip_address + '</td>' +
                                '<td>' + formatted + '</td>' +
                                '</tr>';
                            jQuery("#ParticipantTable tbody").append(row);
                            i++;
                        }

                        var doc = new jsPDF('l', 'pt', 'a3');
                        doc.text(350, 30, "Participants Registration Details");
                        doc.setFontSize(13);
                        var as = "null";
                        //doc.text(40, 50, 'Participants');
                        //doc.text(650, 50, 'End Date' );

                        var last = document.getElementById("last");
                        last.classList.add("d-none");

                        var res = doc.autoTableHtmlToJson(document.getElementById('ParticipantTable'));
                        doc.autoTable(res.columns, res.data, {
                            //headerStyles: {headerWidth: 'auto'},
                            margin: { top: 60 },
                            columnStyles: {
                                0: { columnWidth: 'auto' },
                                1: { columnWidth: 'wrap' },
                                2: { columnWidth: 'wrap' },
                                3: { columnWidth: 'wrap' },
                                4: { columnWidth: 'wrap' }, // Region
                                5: { columnWidth: 'wrap' }, // District
                                6: { columnWidth: 'auto' },
                                7: { columnWidth: 'auto' },
                                8: { columnWidth: 'auto' },
                                9: { columnWidth: 'auto' },
                                10: { columnWidth: 'auto' }

                            },
                            styles: { overflow: 'linebreak' }
                        });
                        var header = function (data) {
                            doc.setFontSize(8);
                            doc.setTextColor(40);
                            doc.setFontStyle('normal');
                        };

                        var options = {
                            addPageContent: header,
                            startY: doc.autoTableEndPosY() + 20,
                            styles: { overflow: 'linebreak' },
                            createdCell: function (cell, opts) {
                                if (cell.text[0].indexOf('da') > -1) {
                                    cell.styles.fillColor = [216, 78, 75];
                                    cell.styles.textColor = [58, 121, 152];
                                    cell.styles.fontStyle = 'bold';
                                    cell.styles.fontSize = '10';
                                }
                            },
                            tableWidth: 'auto',
                        };

                        // doc.autoTable(res.columns, res.data, options);
                        doc.save('Participants.pdf');

                        @**@jQuery("#ParticipantTable").DataTable().clear().destroy();
                        jQuery("#ParticipantTable tfoot").empty();
                    }
                },
            });
        }

        function districtDropdownListHandler() {
            var $regionDropdownList = $('#region');

            $regionDropdownList.on('change', function () {
                var regionId = $regionDropdownList.val();

                // Send Data to Controller On change Event Id
                 $.ajax({
                    type: 'POST',
                     url: '@Url.Action("getDistricts")/' + regionId,

                     success: function (data) {
                         console.log(data);
                         var s = '<option value="-1">Select District</option>';
                         for (var i = 0; i < data.visitorSelectionList.length; i++) {
                             s += '<option value="' + data.visitorSelectionList[i].Value + '">' + data.visitorSelectionList[i].Text + '</option>';
                         }
                        // console.log(data.visitorSelectionList[0]);

                         $("#district").html(s);

                    }
                });

            });

        }

        function wardDropdownListHandler() {
            var $districtDropdownList = $('#district');

             $districtDropdownList.on('change', function () {
                 var districtId = $districtDropdownList.val();

                // Send Data to Controller On change Event Id
                 $.ajax({
                    type: 'POST',
                     url: '@Url.Action("getWards")/' + districtId,

                     success: function (data) {
                         console.log(data);
                         var s = '<option value="-1">Select Ward</option>';
                         for (var i = 0; i < data.visitorSelectionList.length; i++) {
                             s += '<option value="' + data.visitorSelectionList[i].Value + '">' + data.visitorSelectionList[i].Text + '</option>';
                         }
                        // console.log(data.visitorSelectionList[0]);

                         $("#ward").html(s);

                    }
                });

            });

        }



       @{ #region Operations On Datatable Buttons }

        function OperationOnDatatableBtns() {

            //click an update button
            $ParticipantTable.on('click', 'button[data-btn-type=edit]', function (e) {
                e.preventDefault();

                $clickedUpdateButton = $(this);

                updateRecordOperation($clickedUpdateButton);
            });

            //click an delete button
            $ParticipantTable.on('click', 'button[data-btn-type=delete]', function (e) {
                e.preventDefault();

                $clickedDeleteButton = $(this);

                deleteRowRecord($clickedDeleteButton);

                submitDeleteForm();

            });


        }

        function updateRecordOperation($this) {
            var url = $this.attr('data-url');
            var data_id = $this.attr('data-id');
            var tr = $this.parentsUntil('tbody').get(2);

            populateUpdateModalFormElements($(tr), data_id);

            //change form action attribute
            $ajaxHelperUpdateForm.attr('action', url);

            $ajaxHelperUpdateModal.modal('show');

        }

        function populateUpdateModalFormElements($table_row, data_id) {

            var row_data = ParticipantDatatable.row($table_row).data();

            var genderValue = getSelectValueForDropdownList(row_data.gender);
            var regionValue = getSelectValueForDropdownList(row_data.region);
            var districtValue = getSelectValueForDropdownList(row_data.district);
            var wardValue = getSelectValueForDropdownList(row_data.ward);

            $ajaxHelperUpdateForm.find('#pat_sno').val(data_id);
            $ajaxHelperUpdateForm.find('#fullname').val(row_data.fullname);
            $ajaxHelperUpdateForm.find('#gender').val(row_data.gender);
            //$ajaxHelperUpdateForm.find('#region option').text(row_data.region == null ? ViewBag.region : "" );
           // $ajaxHelperUpdateForm.find('#district option').text(row_data.district == null ? ViewBag.district : "");
            $ajaxHelperUpdateForm.find('#dob').val(row_data.dob);
            $ajaxHelperUpdateForm.find('#Int_Mobile_number').val('+' + row_data.phone_number);
            $ajaxHelperUpdateForm.find('#mobile_no_clone').val('+' + row_data.phone_number);
            //$ajaxHelperUpdateForm.find('#ward option').text(row_data.ward == null ? ViewBag.wards : "");

            $mobileNumber = $ajaxHelperUpdateForm.find('#phone_number').get(0);

            var iti = window.intlTelInputGlobals.getInstance($mobileNumber);
            iti.setNumber('+' + row_data.phone_number);
        }

        function getSelectValueForDropdownList(optionItemText) {
            var $optinItemList = $ajaxHelperUpdateForm.find('#region option');
            var optionItemValue = '';

            $.map($optinItemList, function (value, index) {
                if ($(value).text().trim() === optionItemText) {
                    optionItemValue = $(value).val();
                }
            });
            return optionItemValue;
        }

        @{#endregion}

        @{ #region Create--Record Section }

        function submitCreateForm() {

            $ajaxHelperCreateForm.on('click', 'button[type=submit]', function (e) {
                e.preventDefault();

                var iti = window.intlTelInputGlobals.getInstance($ajaxHelperCreateForm.find('#phone_number').get(0));

                if ($ajaxHelperCreateForm.valid() && iti.isValidNumber()) {
                    Swal.fire({
                        //title: 'Are you sure?',
                        text: "Do you want to add participant record?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $ajaxHelperCreateForm.submit();
                        }
                    });
                }

            });

        }

        function OnBeginRequestCreate() {

            //Display preloader on modal open
            getModalPreLoader($ajaxHelperCreateModal).show();
        }

        function OnSuccessRequestCreate(data) {

            //Hide modal pre-loader after closing the modal
            getModalPreLoader($ajaxHelperCreateModal).hide();

            ParticipantDatatable.ajax.reload();

            $ajaxHelperCreateModal.modal('hide');

             if (data.loginStatus == false) {
                window.location.replace('@Url.Action("Login", "Login")');
            }
            else if (data.createStatus) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: 'success',
                    title: data.response
                })
            }

            //Reset form fields
            resetFormFieldsOnModalClose($ajaxHelperCreateModal, $ajaxHelperCreateForm);

        }

        function OnFailureRequestCreate() {

            //Hide modal pre-loader after closing the modal
            getModalPreLoader($ajaxHelperCreateModal).hide();

            $ajaxHelperCreateModal.modal('hide');

            //Reset form fields
            resetFormFieldsOnModalClose($ajaxHelperCreateModal, $ajaxHelperCreateForm);
        }

        @{ #endregion}

        @{ #region Update--Record Section }

        function submitUpdateForm() {

            $ajaxHelperUpdateForm.on('click', 'button[type=submit]', function (e) {
                e.preventDefault();

                var iti = window.intlTelInputGlobals.getInstance($ajaxHelperUpdateForm.find('#phone_number').get(0));

                if ($ajaxHelperUpdateForm.valid() && iti.isValidNumber()) {
                    Swal.fire({
                        //title: 'Are you sure?',
                        text: "Do you want to update invitee record?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $ajaxHelperUpdateForm.submit();
                        }
                    });
                }

            });
        }

        function OnBeginRequestUpdate() {
            //Display preloader on modal open
            getModalPreLoader($ajaxHelperUpdateModal).show();
        }

        function OnSuccessRequestUpdate(data) {
            $ajaxHelperUpdateModal.modal('hide');

            //Reset form fields
            resetFormFieldsOnModalClose($ajaxHelperUpdateModal, $ajaxHelperUpdateForm);

            //Hide modal pre-loader after closing the modal
            getModalPreLoader($ajaxHelperUpdateModal).hide();

            if (data.loginStatus == false) {
                window.location.replace('@Url.Action("Login", "Login")');
            }
            else if (data.updateStatus) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: 'success',
                    title: data.response
                })
            }

            //refresh the datatable after updating data
            ParticipantDatatable.ajax.reload();
        }

        function OnFailureRequestUpdate() {
            $ajaxHelperUpdateModal.modal('hide');

            //Reset form fields
            resetFormFieldsOnModalClose($ajaxHelperUpdateModal, $ajaxHelperUpdateForm);

            //Hide modal pre-loader after closing the modal
            getModalPreLoader($ajaxHelperUpdateModal).hide();
        }

        @{ #endregion}

        @{ #region Delete--Record Section }

        function submitDeleteForm() {

            $ajaxHelperDeleteForm.on('click', 'button[type=submit]', function (e) {
                e.preventDefault();

                if ($ajaxHelperDeleteForm.valid()) {
                    Swal.fire({
                        //title: 'Are you sure?',
                        //text: "Do you want to update invitee record?",
                        text: "Do you want to delete invitee?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $ajaxHelperDeleteForm.submit();
                        }
                    });
                }

            });
        }

        function deleteRowRecord($this) {
            var url = $this.attr('data-url');
            var data_id = $this.attr('data-id');

            //change form action attribute
            $ajaxHelperDeleteForm.attr('action', url);

            $ajaxHelperDeleteForm.find('#pat_sno').val(data_id);

            $('#deleteBtn').on('click', function (e) {
                e.preventDefault();

                if ($ajaxHelperDeleteForm.valid()) {
                    Swal.fire({
                        //title: 'Are you sure?',
                        //text: "Do you want to update invitee record?",
                        text: "Do you want to delete Participant?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $ajaxHelperDeleteForm.submit();
                        }
                    });
                }
            });

            $('#deleteBtn').trigger('click');

        }

        function OnBeginRequestDelete() {
            //Display preloader upon confirm delete
            $clickedDeleteButton.parent().hide().next().css('display', 'flex');
        }

        function OnSuccessRequestDelete(data) {
            //Hide preloader on success
            $clickedDeleteButton.parent().css('display', 'flex').next().hide();

            //Reset form fields
            resetFormFields($ajaxHelperDeleteForm);

            //if (data.deleteStatus) {
            //    alert(data.response);
            //} else {
            //    alert(data.response);
            //}

            if (data.deleteStatus) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: 'success',
                    title: data.response
                })
            } else {
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: 'success',
                    title: data.response
                })
            }

            //refresh the datatable after updating data
            ParticipantDatatable.ajax.reload();
        }

        function OnFailureRequestDelete() {
            //Hide preloader on failure
            $clickedDeleteButton.parent().css('display', 'flex').next().hide();

            //Reset form fields
            resetFormFields($ajaxHelperDeleteForm);

        }

        @{ #endregion}


        /**
         * *This function clears form field of a specific
         *
         * @@param form specific form Element
         */
        function resetFormFields($form) {
            $form.find('#fullname').val('');
            $form.find('#gender').val('');
            $form.find('#phone_number').val('');
            $form.find('#district').val('');
            $form.find('#dob').val('');
            $form.find('#region').val('');
            $form.find('#opportunity').val('');
            $form.find('#business').val('');
            $form.find('#entrepreneur_status').val('');

        }

        function resetFormFieldsOnModalClose(modal, form) {
            modal.on('hidden.bs.modal', function () {
                resetFormFields(form);
                validateFormElementsOnModalClose(form);
            });
        }

        function validateWhetherMobileNumberExists($form) {
            var $mobileNumberField = $form.find('#phone_number');

            var iti = window.intlTelInputGlobals.getInstance($mobileNumberField.get(0));

            $mobileNumberField.on('blur', function (e) {
                if (iti.isValidNumber()) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("IsMobileNumberAvailable", "Participants")',
                        data: populateDataToValidateWhetherMobileNumberExists($form),
                        success: function (data) {

                            if (!data) {
                                Swal.fire(
                                    'Mobile Number already in use',
                                    'The mobile number <strong>' + $form.find('#Int_Mobile_number').val().trim() + '</strong> is currently used by another visitor.',
                                    'info'
                                );
                            }
                        }
                    });
                }
            });
        }

        function populateDataToValidateWhetherMobileNumberExists($form) {
            var mobile_number = $form.find('#phone_number').val();
            var verificationToken = $form.find('input[name=__RequestVerificationToken]').val();
            var int_mobile_number_cloned = $form.find('#mobile_no_clone').val();

            var countryCodeIdValue = $form.find('.iti__selected-dial-code').text().trim();
            var int_mobile_number_value = countryCodeIdValue + mobile_number;

            $form.find('#Int_Mobile_number').val(int_mobile_number_value);

            var int_mobile_number_cloned_value = int_mobile_number_cloned != null ? int_mobile_number_cloned : "";

            return {
                //"Mobile_number": mobile_number,
                "__RequestVerificationToken": verificationToken,
                "Int_Mobile_number": int_mobile_number_value,
                "Mobile_number_clone": int_mobile_number_cloned_value
            };
        }

        function getModalPreLoader(modal) {
            return modal.find('.modal_pre-loader');
        }

        function validateFormElementsOnModalClose(form) {
            var $field = form.find('.input-validation-error');
            var $spanErrorWrapper = form.find('.field-validation-error')

            //Validate the field
            $field.removeClass('input-validation-error').addClass('valid');
            $field.attr('aria-invalid', 'false');

            //Validate the span error wrapper and remove the span error message
            $spanErrorWrapper.removeClass('field-validation-error').addClass('field-validation-valid');
            $spanErrorWrapper.empty();
        }
</script>
}

